{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/paulrosero/Development/code/myportfoliowebpage/portfolio-website/src/components/projects.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport Project from './projectsComponents/project';\n\nfunction Projects() {\n  _s();\n\n  const [projects, setProjects] = useState([]);\n  const [error, setError] = useState(null);\n  const [isLoaded, setIsLoaded] = useState(false);\n  useEffect(() => {\n    fetch(\"https://api.github.com/users/paul-rosero/starred\").then(promise => promise.json()).then(data => {\n      setIsLoaded(true);\n      setProjects(data);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, [isLoaded]);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 16\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 16\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      id: \"projects\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: \"center\"\n        },\n        children: \"My Projects:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Project, {\n        projects: projects\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(Projects, \"Hznu5wJbId9wSsvm7ql7GS7nMrA=\");\n\n_c = Projects;\nexport default Projects;\n\nvar _c;\n\n$RefreshReg$(_c, \"Projects\");","map":{"version":3,"sources":["/Users/paulrosero/Development/code/myportfoliowebpage/portfolio-website/src/components/projects.js"],"names":["React","useState","useEffect","Project","Projects","projects","setProjects","error","setError","isLoaded","setIsLoaded","fetch","then","promise","json","data","message","textAlign"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,OAAP,MAAoB,8BAApB;;AAEA,SAASC,QAAT,GAAoB;AAAA;;AAChB,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BL,QAAQ,CAAC,EAAD,CAAxC;AACA,QAAM,CAACM,KAAD,EAAQC,QAAR,IAAoBP,QAAQ,CAAC,IAAD,CAAlC;AACA,QAAM,CAACQ,QAAD,EAAWC,WAAX,IAA0BT,QAAQ,CAAC,KAAD,CAAxC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZS,IAAAA,KAAK,CAAC,kDAAD,CAAL,CACCC,IADD,CACMC,OAAO,IAAIA,OAAO,CAACC,IAAR,EADjB,EAECF,IAFD,CAEMG,IAAI,IAAI;AACVL,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAJ,MAAAA,WAAW,CAACS,IAAD,CAAX;AACH,KALD,EAKIR,KAAD,IAAW;AACVG,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAF,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACH,KARD;AASH,GAVQ,EAUN,CAACE,QAAD,CAVM,CAAT;;AAYA,MAAIF,KAAJ,EAAW;AACP,wBAAO;AAAA,4BAAaA,KAAK,CAACS,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFD,MAEO,IAAI,CAACP,QAAL,EAAe;AAClB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACH,GAFM,MAEA;AACH,wBACI;AAAK,MAAA,SAAS,EAAC,WAAf;AAA2B,MAAA,EAAE,EAAC,UAA9B;AAAA,8BACI;AAAI,QAAA,KAAK,EAAE;AAAEQ,UAAAA,SAAS,EAAE;AAAb,SAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,OAAD;AAAS,QAAA,QAAQ,EAAGZ;AAApB;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;AACJ;;GA7BQD,Q;;KAAAA,Q;AA+BT,eAAeA,QAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Project from './projectsComponents/project';\n\nfunction Projects() {\n    const [projects, setProjects] = useState([]);\n    const [error, setError] = useState(null);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    useEffect(() => {\n        fetch(\"https://api.github.com/users/paul-rosero/starred\")\n        .then(promise => promise.json())\n        .then(data => { \n            setIsLoaded(true);\n            setProjects(data);\n        }, (error) => {\n            setIsLoaded(true)\n            setError(error);\n        })\n    }, [isLoaded]);\n\n    if (error) {\n        return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n        return <div>Loading...</div>;\n    } else {\n        return (\n            <div className=\"container\" id=\"projects\">\n                <h1 style={{ textAlign: \"center\" }}>My Projects:</h1>\n                <Project projects={ projects }/>\n            </div>    \n        );\n    }\n}\n\nexport default Projects;\n\n\n"]},"metadata":{},"sourceType":"module"}