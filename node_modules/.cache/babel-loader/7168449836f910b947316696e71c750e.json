{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\n/* eslint valid-jsdoc: [\"error\", {\"requireReturnDescription\": false}] */\n\n\nvar _Gist = require('./Gist');\n\nvar _Gist2 = _interopRequireDefault(_Gist);\n\nvar _User = require('./User');\n\nvar _User2 = _interopRequireDefault(_User);\n\nvar _Issue = require('./Issue');\n\nvar _Issue2 = _interopRequireDefault(_Issue);\n\nvar _Search = require('./Search');\n\nvar _Search2 = _interopRequireDefault(_Search);\n\nvar _RateLimit = require('./RateLimit');\n\nvar _RateLimit2 = _interopRequireDefault(_RateLimit);\n\nvar _Repository = require('./Repository');\n\nvar _Repository2 = _interopRequireDefault(_Repository);\n\nvar _Organization = require('./Organization');\n\nvar _Organization2 = _interopRequireDefault(_Organization);\n\nvar _Team = require('./Team');\n\nvar _Team2 = _interopRequireDefault(_Team);\n\nvar _Markdown = require('./Markdown');\n\nvar _Markdown2 = _interopRequireDefault(_Markdown);\n\nvar _Project = require('./Project');\n\nvar _Project2 = _interopRequireDefault(_Project);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n/**\n * GitHub encapsulates the functionality to create various API wrapper objects.\n */\n\n\nvar GitHub = function () {\n  /**\n   * Create a new GitHub.\n   * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\n   *                                  not provided requests will be made unauthenticated\n   * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n   */\n  function GitHub(auth) {\n    var apiBase = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'https://api.github.com';\n\n    _classCallCheck(this, GitHub);\n\n    this.__apiBase = apiBase;\n    this.__auth = auth || {};\n  }\n  /**\n   * Create a new Gist wrapper\n   * @param {string} [id] - the id for the gist, leave undefined when creating a new gist\n   * @return {Gist}\n   */\n\n\n  _createClass(GitHub, [{\n    key: 'getGist',\n    value: function getGist(id) {\n      return new _Gist2.default(id, this.__auth, this.__apiBase);\n    }\n    /**\n     * Create a new User wrapper\n     * @param {string} [user] - the name of the user to get information about\n     *                        leave undefined for the authenticated user\n     * @return {User}\n     */\n\n  }, {\n    key: 'getUser',\n    value: function getUser(user) {\n      return new _User2.default(user, this.__auth, this.__apiBase);\n    }\n    /**\n     * Create a new Organization wrapper\n     * @param {string} organization - the name of the organization\n     * @return {Organization}\n     */\n\n  }, {\n    key: 'getOrganization',\n    value: function getOrganization(organization) {\n      return new _Organization2.default(organization, this.__auth, this.__apiBase);\n    }\n    /**\n     * create a new Team wrapper\n     * @param {string} teamId - the name of the team\n     * @return {team}\n     */\n\n  }, {\n    key: 'getTeam',\n    value: function getTeam(teamId) {\n      return new _Team2.default(teamId, this.__auth, this.__apiBase);\n    }\n    /**\n     * Create a new Repository wrapper\n     * @param {string} user - the user who owns the repository\n     * @param {string} repo - the name of the repository\n     * @return {Repository}\n     */\n\n  }, {\n    key: 'getRepo',\n    value: function getRepo(user, repo) {\n      return new _Repository2.default(this._getFullName(user, repo), this.__auth, this.__apiBase);\n    }\n    /**\n     * Create a new Issue wrapper\n     * @param {string} user - the user who owns the repository\n     * @param {string} repo - the name of the repository\n     * @return {Issue}\n     */\n\n  }, {\n    key: 'getIssues',\n    value: function getIssues(user, repo) {\n      return new _Issue2.default(this._getFullName(user, repo), this.__auth, this.__apiBase);\n    }\n    /**\n     * Create a new Search wrapper\n     * @param {string} query - the query to search for\n     * @return {Search}\n     */\n\n  }, {\n    key: 'search',\n    value: function search(query) {\n      return new _Search2.default(query, this.__auth, this.__apiBase);\n    }\n    /**\n     * Create a new RateLimit wrapper\n     * @return {RateLimit}\n     */\n\n  }, {\n    key: 'getRateLimit',\n    value: function getRateLimit() {\n      return new _RateLimit2.default(this.__auth, this.__apiBase);\n    }\n    /**\n     * Create a new Markdown wrapper\n     * @return {Markdown}\n     */\n\n  }, {\n    key: 'getMarkdown',\n    value: function getMarkdown() {\n      return new _Markdown2.default(this.__auth, this.__apiBase);\n    }\n    /**\n     * Create a new Project wrapper\n     * @param {string} id - the id of the project\n     * @return {Project}\n     */\n\n  }, {\n    key: 'getProject',\n    value: function getProject(id) {\n      return new _Project2.default(id, this.__auth, this.__apiBase);\n    }\n    /**\n     * Computes the full repository name\n     * @param {string} user - the username (or the full name)\n     * @param {string} repo - the repository name, must not be passed if `user` is the full name\n     * @return {string} the repository's full name\n     */\n\n  }, {\n    key: '_getFullName',\n    value: function _getFullName(user, repo) {\n      var fullname = user;\n\n      if (repo) {\n        fullname = user + '/' + repo;\n      }\n\n      return fullname;\n    }\n  }]);\n\n  return GitHub;\n}();\n\nmodule.exports = GitHub; //# sourceMappingURL=GitHub.js.map","map":{"version":3,"sources":["GitHub.js"],"names":["GitHub","apiBase","auth","id","Gist","user","User","organization","Organization","teamId","Team","repo","Repository","Issue","query","Search","RateLimit","Markdown","Project","fullname","module"],"mappings":"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","sourcesContent":["/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n/* eslint valid-jsdoc: [\"error\", {\"requireReturnDescription\": false}] */\n\nimport Gist from './Gist';\nimport User from './User';\nimport Issue from './Issue';\nimport Search from './Search';\nimport RateLimit from './RateLimit';\nimport Repository from './Repository';\nimport Organization from './Organization';\nimport Team from './Team';\nimport Markdown from './Markdown';\nimport Project from './Project';\n\n/**\n * GitHub encapsulates the functionality to create various API wrapper objects.\n */\nclass GitHub {\n   /**\n    * Create a new GitHub.\n    * @param {Requestable.auth} [auth] - the credentials to authenticate to Github. If auth is\n    *                                  not provided requests will be made unauthenticated\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(auth, apiBase = 'https://api.github.com') {\n      this.__apiBase = apiBase;\n      this.__auth = auth || {};\n   }\n\n   /**\n    * Create a new Gist wrapper\n    * @param {string} [id] - the id for the gist, leave undefined when creating a new gist\n    * @return {Gist}\n    */\n   getGist(id) {\n      return new Gist(id, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new User wrapper\n    * @param {string} [user] - the name of the user to get information about\n    *                        leave undefined for the authenticated user\n    * @return {User}\n    */\n   getUser(user) {\n      return new User(user, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Organization wrapper\n    * @param {string} organization - the name of the organization\n    * @return {Organization}\n    */\n   getOrganization(organization) {\n      return new Organization(organization, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * create a new Team wrapper\n    * @param {string} teamId - the name of the team\n    * @return {team}\n    */\n   getTeam(teamId) {\n      return new Team(teamId, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Repository wrapper\n    * @param {string} user - the user who owns the repository\n    * @param {string} repo - the name of the repository\n    * @return {Repository}\n    */\n   getRepo(user, repo) {\n      return new Repository(this._getFullName(user, repo), this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Issue wrapper\n    * @param {string} user - the user who owns the repository\n    * @param {string} repo - the name of the repository\n    * @return {Issue}\n    */\n   getIssues(user, repo) {\n      return new Issue(this._getFullName(user, repo), this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Search wrapper\n    * @param {string} query - the query to search for\n    * @return {Search}\n    */\n   search(query) {\n      return new Search(query, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new RateLimit wrapper\n    * @return {RateLimit}\n    */\n   getRateLimit() {\n      return new RateLimit(this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Markdown wrapper\n    * @return {Markdown}\n    */\n   getMarkdown() {\n      return new Markdown(this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Create a new Project wrapper\n    * @param {string} id - the id of the project\n    * @return {Project}\n    */\n   getProject(id) {\n      return new Project(id, this.__auth, this.__apiBase);\n   }\n\n   /**\n    * Computes the full repository name\n    * @param {string} user - the username (or the full name)\n    * @param {string} repo - the repository name, must not be passed if `user` is the full name\n    * @return {string} the repository's full name\n    */\n   _getFullName(user, repo) {\n      let fullname = user;\n\n      if (repo) {\n         fullname = `${user}/${repo}`;\n      }\n\n      return fullname;\n   }\n}\n\nmodule.exports = GitHub;\n"]},"metadata":{},"sourceType":"script"}