{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Requestable2 = require('./Requestable');\n\nvar _Requestable3 = _interopRequireDefault(_Requestable2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\n/**\n * Project encapsulates the functionality to create, query, and modify cards and columns.\n */\n\n\nvar Project = function (_Requestable) {\n  _inherits(Project, _Requestable);\n  /**\n   * Create a Project.\n   * @param {string} id - the id of the project\n   * @param {Requestable.auth} [auth] - information required to authenticate to Github\n   * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n   */\n\n\n  function Project(id, auth, apiBase) {\n    _classCallCheck(this, Project);\n\n    var _this = _possibleConstructorReturn(this, (Project.__proto__ || Object.getPrototypeOf(Project)).call(this, auth, apiBase, 'inertia-preview'));\n\n    _this.__id = id;\n    return _this;\n  }\n  /**\n   * Get information about a project\n   * @see https://developer.github.com/v3/projects/#get-a-project\n   * @param {Requestable.callback} cb - will receive the project information\n   * @return {Promise} - the promise for the http request\n   */\n\n\n  _createClass(Project, [{\n    key: 'getProject',\n    value: function getProject(cb) {\n      return this._request('GET', '/projects/' + this.__id, null, cb);\n    }\n    /**\n     * Edit a project\n     * @see https://developer.github.com/v3/projects/#update-a-project\n     * @param {Object} options - the description of the project\n     * @param {Requestable.callback} cb - will receive the modified project\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'updateProject',\n    value: function updateProject(options, cb) {\n      return this._request('PATCH', '/projects/' + this.__id, options, cb);\n    }\n    /**\n     * Delete a project\n     * @see https://developer.github.com/v3/projects/#delete-a-project\n     * @param {Requestable.callback} cb - will receive true if the operation is successful\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'deleteProject',\n    value: function deleteProject(cb) {\n      return this._request('DELETE', '/projects/' + this.__id, null, cb);\n    }\n    /**\n     * Get information about all columns of a project\n     * @see https://developer.github.com/v3/projects/columns/#list-project-columns\n     * @param {Requestable.callback} [cb] - will receive the list of columns\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listProjectColumns',\n    value: function listProjectColumns(cb) {\n      return this._requestAllPages('/projects/' + this.__id + '/columns', null, cb);\n    }\n    /**\n     * Get information about a column\n     * @see https://developer.github.com/v3/projects/columns/#get-a-project-column\n     * @param {string} colId - the id of the column\n     * @param {Requestable.callback} cb - will receive the column information\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getProjectColumn',\n    value: function getProjectColumn(colId, cb) {\n      return this._request('GET', '/projects/columns/' + colId, null, cb);\n    }\n    /**\n     * Create a new column\n     * @see https://developer.github.com/v3/projects/columns/#create-a-project-column\n     * @param {Object} options - the description of the column\n     * @param {Requestable.callback} cb - will receive the newly created column\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createProjectColumn',\n    value: function createProjectColumn(options, cb) {\n      return this._request('POST', '/projects/' + this.__id + '/columns', options, cb);\n    }\n    /**\n     * Edit a column\n     * @see https://developer.github.com/v3/projects/columns/#update-a-project-column\n     * @param {string} colId - the column id\n     * @param {Object} options - the description of the column\n     * @param {Requestable.callback} cb - will receive the modified column\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'updateProjectColumn',\n    value: function updateProjectColumn(colId, options, cb) {\n      return this._request('PATCH', '/projects/columns/' + colId, options, cb);\n    }\n    /**\n     * Delete a column\n     * @see https://developer.github.com/v3/projects/columns/#delete-a-project-column\n     * @param {string} colId - the column to be deleted\n     * @param {Requestable.callback} cb - will receive true if the operation is successful\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'deleteProjectColumn',\n    value: function deleteProjectColumn(colId, cb) {\n      return this._request('DELETE', '/projects/columns/' + colId, null, cb);\n    }\n    /**\n     * Move a column\n     * @see https://developer.github.com/v3/projects/columns/#move-a-project-column\n     * @param {string} colId - the column to be moved\n     * @param {string} position - can be one of first, last, or after:<column-id>,\n     * where <column-id> is the id value of a column in the same project.\n     * @param {Requestable.callback} cb - will receive true if the operation is successful\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'moveProjectColumn',\n    value: function moveProjectColumn(colId, position, cb) {\n      return this._request('POST', '/projects/columns/' + colId + '/moves', {\n        position: position\n      }, cb);\n    }\n    /**\n     * Get information about all cards of a project\n     * @see https://developer.github.com/v3/projects/cards/#list-project-cards\n     * @param {Requestable.callback} [cb] - will receive the list of cards\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listProjectCards',\n    value: function listProjectCards(cb) {\n      var _this2 = this;\n\n      return this.listProjectColumns().then(function (_ref) {\n        var data = _ref.data;\n        return Promise.all(data.map(function (column) {\n          return _this2._requestAllPages('/projects/columns/' + column.id + '/cards', null);\n        }));\n      }).then(function (cardsInColumns) {\n        var cards = cardsInColumns.reduce(function (prev, _ref2) {\n          var data = _ref2.data;\n          prev.push.apply(prev, _toConsumableArray(data));\n          return prev;\n        }, []);\n\n        if (cb) {\n          cb(null, cards);\n        }\n\n        return cards;\n      }).catch(function (err) {\n        if (cb) {\n          cb(err);\n          return;\n        }\n\n        throw err;\n      });\n    }\n    /**\n    * Get information about all cards of a column\n    * @see https://developer.github.com/v3/projects/cards/#list-project-cards\n    * @param {string} colId - the id of the column\n    * @param {Requestable.callback} [cb] - will receive the list of cards\n    * @return {Promise} - the promise for the http request\n    */\n\n  }, {\n    key: 'listColumnCards',\n    value: function listColumnCards(colId, cb) {\n      return this._requestAllPages('/projects/columns/' + colId + '/cards', null, cb);\n    }\n    /**\n    * Get information about a card\n    * @see https://developer.github.com/v3/projects/cards/#get-a-project-card\n    * @param {string} cardId - the id of the card\n    * @param {Requestable.callback} cb - will receive the card information\n    * @return {Promise} - the promise for the http request\n    */\n\n  }, {\n    key: 'getProjectCard',\n    value: function getProjectCard(cardId, cb) {\n      return this._request('GET', '/projects/columns/cards/' + cardId, null, cb);\n    }\n    /**\n    * Create a new card\n    * @see https://developer.github.com/v3/projects/cards/#create-a-project-card\n    * @param {string} colId - the column id\n    * @param {Object} options - the description of the card\n    * @param {Requestable.callback} cb - will receive the newly created card\n    * @return {Promise} - the promise for the http request\n    */\n\n  }, {\n    key: 'createProjectCard',\n    value: function createProjectCard(colId, options, cb) {\n      return this._request('POST', '/projects/columns/' + colId + '/cards', options, cb);\n    }\n    /**\n    * Edit a card\n    * @see https://developer.github.com/v3/projects/cards/#update-a-project-card\n    * @param {string} cardId - the card id\n    * @param {Object} options - the description of the card\n    * @param {Requestable.callback} cb - will receive the modified card\n    * @return {Promise} - the promise for the http request\n    */\n\n  }, {\n    key: 'updateProjectCard',\n    value: function updateProjectCard(cardId, options, cb) {\n      return this._request('PATCH', '/projects/columns/cards/' + cardId, options, cb);\n    }\n    /**\n    * Delete a card\n    * @see https://developer.github.com/v3/projects/cards/#delete-a-project-card\n    * @param {string} cardId - the card to be deleted\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\n    * @return {Promise} - the promise for the http request\n    */\n\n  }, {\n    key: 'deleteProjectCard',\n    value: function deleteProjectCard(cardId, cb) {\n      return this._request('DELETE', '/projects/columns/cards/' + cardId, null, cb);\n    }\n    /**\n    * Move a card\n    * @see https://developer.github.com/v3/projects/cards/#move-a-project-card\n    * @param {string} cardId - the card to be moved\n    * @param {string} position - can be one of top, bottom, or after:<card-id>,\n    * where <card-id> is the id value of a card in the same project.\n    * @param {string} colId - the id value of a column in the same project.\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\n    * @return {Promise} - the promise for the http request\n    */\n\n  }, {\n    key: 'moveProjectCard',\n    value: function moveProjectCard(cardId, position, colId, cb) {\n      return this._request('POST', '/projects/columns/cards/' + cardId + '/moves', {\n        position: position,\n        column_id: colId\n      }, // eslint-disable-line camelcase\n      cb);\n    }\n  }]);\n\n  return Project;\n}(_Requestable3.default);\n\nmodule.exports = Project; //# sourceMappingURL=Project.js.map","map":{"version":3,"sources":["Project.js"],"names":["Project","Requestable","cb","options","colId","position","data","column","cards","prev","cardId","column_id","module"],"mappings":"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","sourcesContent":["/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\n\n/**\n * Project encapsulates the functionality to create, query, and modify cards and columns.\n */\nclass Project extends Requestable {\n   /**\n    * Create a Project.\n    * @param {string} id - the id of the project\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(id, auth, apiBase) {\n      super(auth, apiBase, 'inertia-preview');\n      this.__id = id;\n   }\n\n   /**\n    * Get information about a project\n    * @see https://developer.github.com/v3/projects/#get-a-project\n    * @param {Requestable.callback} cb - will receive the project information\n    * @return {Promise} - the promise for the http request\n    */\n   getProject(cb) {\n      return this._request('GET', `/projects/${this.__id}`, null, cb);\n   }\n\n   /**\n    * Edit a project\n    * @see https://developer.github.com/v3/projects/#update-a-project\n    * @param {Object} options - the description of the project\n    * @param {Requestable.callback} cb - will receive the modified project\n    * @return {Promise} - the promise for the http request\n    */\n   updateProject(options, cb) {\n      return this._request('PATCH', `/projects/${this.__id}`, options, cb);\n   }\n\n   /**\n    * Delete a project\n    * @see https://developer.github.com/v3/projects/#delete-a-project\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteProject(cb) {\n      return this._request('DELETE', `/projects/${this.__id}`, null, cb);\n   }\n\n   /**\n    * Get information about all columns of a project\n    * @see https://developer.github.com/v3/projects/columns/#list-project-columns\n    * @param {Requestable.callback} [cb] - will receive the list of columns\n    * @return {Promise} - the promise for the http request\n    */\n   listProjectColumns(cb) {\n      return this._requestAllPages(`/projects/${this.__id}/columns`, null, cb);\n   }\n\n   /**\n    * Get information about a column\n    * @see https://developer.github.com/v3/projects/columns/#get-a-project-column\n    * @param {string} colId - the id of the column\n    * @param {Requestable.callback} cb - will receive the column information\n    * @return {Promise} - the promise for the http request\n    */\n   getProjectColumn(colId, cb) {\n      return this._request('GET', `/projects/columns/${colId}`, null, cb);\n   }\n\n   /**\n    * Create a new column\n    * @see https://developer.github.com/v3/projects/columns/#create-a-project-column\n    * @param {Object} options - the description of the column\n    * @param {Requestable.callback} cb - will receive the newly created column\n    * @return {Promise} - the promise for the http request\n    */\n   createProjectColumn(options, cb) {\n      return this._request('POST', `/projects/${this.__id}/columns`, options, cb);\n   }\n\n   /**\n    * Edit a column\n    * @see https://developer.github.com/v3/projects/columns/#update-a-project-column\n    * @param {string} colId - the column id\n    * @param {Object} options - the description of the column\n    * @param {Requestable.callback} cb - will receive the modified column\n    * @return {Promise} - the promise for the http request\n    */\n   updateProjectColumn(colId, options, cb) {\n      return this._request('PATCH', `/projects/columns/${colId}`, options, cb);\n   }\n\n   /**\n    * Delete a column\n    * @see https://developer.github.com/v3/projects/columns/#delete-a-project-column\n    * @param {string} colId - the column to be deleted\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteProjectColumn(colId, cb) {\n      return this._request('DELETE', `/projects/columns/${colId}`, null, cb);\n   }\n\n   /**\n    * Move a column\n    * @see https://developer.github.com/v3/projects/columns/#move-a-project-column\n    * @param {string} colId - the column to be moved\n    * @param {string} position - can be one of first, last, or after:<column-id>,\n    * where <column-id> is the id value of a column in the same project.\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\n    * @return {Promise} - the promise for the http request\n    */\n   moveProjectColumn(colId, position, cb) {\n      return this._request(\n         'POST',\n         `/projects/columns/${colId}/moves`,\n         {position: position},\n         cb\n      );\n   }\n\n  /**\n   * Get information about all cards of a project\n   * @see https://developer.github.com/v3/projects/cards/#list-project-cards\n   * @param {Requestable.callback} [cb] - will receive the list of cards\n   * @return {Promise} - the promise for the http request\n   */\n   listProjectCards(cb) {\n      return this.listProjectColumns()\n        .then(({data}) => {\n           return Promise.all(data.map((column) => {\n              return this._requestAllPages(`/projects/columns/${column.id}/cards`, null);\n           }));\n        }).then((cardsInColumns) => {\n           const cards = cardsInColumns.reduce((prev, {data}) => {\n              prev.push(...data);\n              return prev;\n           }, []);\n           if (cb) {\n              cb(null, cards);\n           }\n           return cards;\n        }).catch((err) => {\n           if (cb) {\n              cb(err);\n              return;\n           }\n           throw err;\n        });\n   }\n\n   /**\n   * Get information about all cards of a column\n   * @see https://developer.github.com/v3/projects/cards/#list-project-cards\n   * @param {string} colId - the id of the column\n   * @param {Requestable.callback} [cb] - will receive the list of cards\n   * @return {Promise} - the promise for the http request\n   */\n   listColumnCards(colId, cb) {\n      return this._requestAllPages(`/projects/columns/${colId}/cards`, null, cb);\n   }\n\n   /**\n   * Get information about a card\n   * @see https://developer.github.com/v3/projects/cards/#get-a-project-card\n   * @param {string} cardId - the id of the card\n   * @param {Requestable.callback} cb - will receive the card information\n   * @return {Promise} - the promise for the http request\n   */\n   getProjectCard(cardId, cb) {\n      return this._request('GET', `/projects/columns/cards/${cardId}`, null, cb);\n   }\n\n   /**\n   * Create a new card\n   * @see https://developer.github.com/v3/projects/cards/#create-a-project-card\n   * @param {string} colId - the column id\n   * @param {Object} options - the description of the card\n   * @param {Requestable.callback} cb - will receive the newly created card\n   * @return {Promise} - the promise for the http request\n   */\n   createProjectCard(colId, options, cb) {\n      return this._request('POST', `/projects/columns/${colId}/cards`, options, cb);\n   }\n\n   /**\n   * Edit a card\n   * @see https://developer.github.com/v3/projects/cards/#update-a-project-card\n   * @param {string} cardId - the card id\n   * @param {Object} options - the description of the card\n   * @param {Requestable.callback} cb - will receive the modified card\n   * @return {Promise} - the promise for the http request\n   */\n   updateProjectCard(cardId, options, cb) {\n      return this._request('PATCH', `/projects/columns/cards/${cardId}`, options, cb);\n   }\n\n   /**\n   * Delete a card\n   * @see https://developer.github.com/v3/projects/cards/#delete-a-project-card\n   * @param {string} cardId - the card to be deleted\n   * @param {Requestable.callback} cb - will receive true if the operation is successful\n   * @return {Promise} - the promise for the http request\n   */\n   deleteProjectCard(cardId, cb) {\n      return this._request('DELETE', `/projects/columns/cards/${cardId}`, null, cb);\n   }\n\n   /**\n   * Move a card\n   * @see https://developer.github.com/v3/projects/cards/#move-a-project-card\n   * @param {string} cardId - the card to be moved\n   * @param {string} position - can be one of top, bottom, or after:<card-id>,\n   * where <card-id> is the id value of a card in the same project.\n   * @param {string} colId - the id value of a column in the same project.\n   * @param {Requestable.callback} cb - will receive true if the operation is successful\n   * @return {Promise} - the promise for the http request\n   */\n   moveProjectCard(cardId, position, colId, cb) {\n      return this._request(\n         'POST',\n         `/projects/columns/cards/${cardId}/moves`,\n         {position: position, column_id: colId}, // eslint-disable-line camelcase\n         cb\n      );\n   }\n}\n\nmodule.exports = Project;\n"]},"metadata":{},"sourceType":"script"}