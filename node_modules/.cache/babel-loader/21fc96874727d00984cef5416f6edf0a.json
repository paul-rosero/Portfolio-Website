{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Requestable2 = require('./Requestable');\n\nvar _Requestable3 = _interopRequireDefault(_Requestable2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\n/**\n * Renders html from Markdown text\n */\n\n\nvar Markdown = function (_Requestable) {\n  _inherits(Markdown, _Requestable);\n  /**\n   * construct a Markdown\n   * @param {Requestable.auth} auth - the credentials to authenticate to GitHub\n   * @param {string} [apiBase] - the base Github API URL\n   * @return {Promise} - the promise for the http request\n   */\n\n\n  function Markdown(auth, apiBase) {\n    _classCallCheck(this, Markdown);\n\n    return _possibleConstructorReturn(this, (Markdown.__proto__ || Object.getPrototypeOf(Markdown)).call(this, auth, apiBase));\n  }\n  /**\n   * Render html from Markdown text.\n   * @see https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document\n   * @param {Object} options - conversion options\n   * @param {string} [options.text] - the markdown text to convert\n   * @param {string} [options.mode=markdown] - can be either `markdown` or `gfm`\n   * @param {string} [options.context] - repository name if mode is gfm\n   * @param {Requestable.callback} [cb] - will receive the converted html\n   * @return {Promise} - the promise for the http request\n   */\n\n\n  _createClass(Markdown, [{\n    key: 'render',\n    value: function render(options, cb) {\n      return this._request('POST', '/markdown', options, cb, true);\n    }\n  }]);\n\n  return Markdown;\n}(_Requestable3.default);\n\nmodule.exports = Markdown; //# sourceMappingURL=Markdown.js.map","map":{"version":3,"sources":["Markdown.js"],"names":["Markdown","Requestable","options","cb","module"],"mappings":";;;;;;;;;;;;;;;;;;;;AAOA,IAAA,aAAA,GAAA,OAAA,CAAA,eAAA,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAPA;;;;;;;AASA;;;;;IAGMA,Q;;AACH;;;;;;;;AAMA,WAAA,QAAA,CAAA,IAAA,EAAA,OAAA,EAA2B;AAAA,IAAA,eAAA,CAAA,IAAA,EAAA,QAAA,CAAA;;AAAA,WAAA,0BAAA,CAAA,IAAA,EAAA,CAAA,QAAA,CAAA,SAAA,IAAA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,EAAA,IAAA,CAAA,IAAA,EAAA,IAAA,EAAA,OAAA,CAAA,CAAA;AAE1B;AAED;;;;;;;;;;;;;;2BAUOE,O,EAASC,E,EAAI;AACjB,aAAO,KAAA,QAAA,CAAA,MAAA,EAAA,WAAA,EAAA,OAAA,EAAA,EAAA,EAAP,IAAO,CAAP;AACF;;;;EAvBmBF,aAAAA,CAAAA,O;;AA0BvBG,MAAAA,CAAAA,OAAAA,GAAAA,QAAAA,C","sourcesContent":["/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\n\n/**\n * Renders html from Markdown text\n */\nclass Markdown extends Requestable {\n   /**\n    * construct a Markdown\n    * @param {Requestable.auth} auth - the credentials to authenticate to GitHub\n    * @param {string} [apiBase] - the base Github API URL\n    * @return {Promise} - the promise for the http request\n    */\n   constructor(auth, apiBase) {\n      super(auth, apiBase);\n   }\n\n   /**\n    * Render html from Markdown text.\n    * @see https://developer.github.com/v3/markdown/#render-an-arbitrary-markdown-document\n    * @param {Object} options - conversion options\n    * @param {string} [options.text] - the markdown text to convert\n    * @param {string} [options.mode=markdown] - can be either `markdown` or `gfm`\n    * @param {string} [options.context] - repository name if mode is gfm\n    * @param {Requestable.callback} [cb] - will receive the converted html\n    * @return {Promise} - the promise for the http request\n    */\n   render(options, cb) {\n      return this._request('POST', '/markdown', options, cb, true);\n   }\n}\n\nmodule.exports = Markdown;\n"]},"metadata":{},"sourceType":"script"}