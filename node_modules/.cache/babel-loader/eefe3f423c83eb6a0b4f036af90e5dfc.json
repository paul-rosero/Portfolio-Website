{"ast":null,"code":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Requestable2 = require('./Requestable');\n\nvar _Requestable3 = _interopRequireDefault(_Requestable2);\n\nvar _utf = require('utf8');\n\nvar _utf2 = _interopRequireDefault(_utf);\n\nvar _jsBase = require('js-base64');\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\n\nvar log = (0, _debug2.default)('github:repository');\n/**\n * Repository encapsulates the functionality to create, query, and modify files.\n */\n\nvar Repository = function (_Requestable) {\n  _inherits(Repository, _Requestable);\n  /**\n   * Create a Repository.\n   * @param {string} fullname - the full name of the repository\n   * @param {Requestable.auth} [auth] - information required to authenticate to Github\n   * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n   */\n\n\n  function Repository(fullname, auth, apiBase) {\n    _classCallCheck(this, Repository);\n\n    var _this = _possibleConstructorReturn(this, (Repository.__proto__ || Object.getPrototypeOf(Repository)).call(this, auth, apiBase));\n\n    _this.__fullname = fullname;\n    _this.__currentTree = {\n      branch: null,\n      sha: null\n    };\n    return _this;\n  }\n  /**\n   * Get a reference\n   * @see https://developer.github.com/v3/git/refs/#get-a-reference\n   * @param {string} ref - the reference to get\n   * @param {Requestable.callback} [cb] - will receive the reference's refSpec or a list of refSpecs that match `ref`\n   * @return {Promise} - the promise for the http request\n   */\n\n\n  _createClass(Repository, [{\n    key: 'getRef',\n    value: function getRef(ref, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/git/refs/' + ref, null, cb);\n    }\n    /**\n     * Create a reference\n     * @see https://developer.github.com/v3/git/refs/#create-a-reference\n     * @param {Object} options - the object describing the ref\n     * @param {Requestable.callback} [cb] - will receive the ref\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createRef',\n    value: function createRef(options, cb) {\n      return this._request('POST', '/repos/' + this.__fullname + '/git/refs', options, cb);\n    }\n    /**\n     * Delete a reference\n     * @see https://developer.github.com/v3/git/refs/#delete-a-reference\n     * @param {string} ref - the name of the ref to delte\n     * @param {Requestable.callback} [cb] - will receive true if the request is successful\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'deleteRef',\n    value: function deleteRef(ref, cb) {\n      return this._request('DELETE', '/repos/' + this.__fullname + '/git/refs/' + ref, null, cb);\n    }\n    /**\n     * Delete a repository\n     * @see https://developer.github.com/v3/repos/#delete-a-repository\n     * @param {Requestable.callback} [cb] - will receive true if the request is successful\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'deleteRepo',\n    value: function deleteRepo(cb) {\n      return this._request('DELETE', '/repos/' + this.__fullname, null, cb);\n    }\n    /**\n     * List the tags on a repository\n     * @see https://developer.github.com/v3/repos/#list-tags\n     * @param {Requestable.callback} [cb] - will receive the tag data\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listTags',\n    value: function listTags(cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/tags', null, cb);\n    }\n    /**\n     * List the open pull requests on the repository\n     * @see https://developer.github.com/v3/pulls/#list-pull-requests\n     * @param {Object} options - options to filter the search\n     * @param {Requestable.callback} [cb] - will receive the list of PRs\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listPullRequests',\n    value: function listPullRequests(options, cb) {\n      options = options || {};\n      return this._request('GET', '/repos/' + this.__fullname + '/pulls', options, cb);\n    }\n    /**\n     * Get information about a specific pull request\n     * @see https://developer.github.com/v3/pulls/#get-a-single-pull-request\n     * @param {number} number - the PR you wish to fetch\n     * @param {Requestable.callback} [cb] - will receive the PR from the API\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getPullRequest',\n    value: function getPullRequest(number, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/pulls/' + number, null, cb);\n    }\n    /**\n     * List the files of a specific pull request\n     * @see https://developer.github.com/v3/pulls/#list-pull-requests-files\n     * @param {number|string} number - the PR you wish to fetch\n     * @param {Requestable.callback} [cb] - will receive the list of files from the API\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listPullRequestFiles',\n    value: function listPullRequestFiles(number, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/pulls/' + number + '/files', null, cb);\n    }\n    /**\n     * Compare two branches/commits/repositories\n     * @see https://developer.github.com/v3/repos/commits/#compare-two-commits\n     * @param {string} base - the base commit\n     * @param {string} head - the head commit\n     * @param {Requestable.callback} cb - will receive the comparison\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'compareBranches',\n    value: function compareBranches(base, head, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/compare/' + base + '...' + head, null, cb);\n    }\n    /**\n     * List all the branches for the repository\n     * @see https://developer.github.com/v3/repos/#list-branches\n     * @param {Requestable.callback} cb - will receive the list of branches\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listBranches',\n    value: function listBranches(cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/branches', null, cb);\n    }\n    /**\n     * Get a raw blob from the repository\n     * @see https://developer.github.com/v3/git/blobs/#get-a-blob\n     * @param {string} sha - the sha of the blob to fetch\n     * @param {Requestable.callback} cb - will receive the blob from the API\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getBlob',\n    value: function getBlob(sha, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/git/blobs/' + sha, null, cb, 'raw');\n    }\n    /**\n     * Get a single branch\n     * @see https://developer.github.com/v3/repos/branches/#get-branch\n     * @param {string} branch - the name of the branch to fetch\n     * @param {Requestable.callback} cb - will receive the branch from the API\n     * @returns {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getBranch',\n    value: function getBranch(branch, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/branches/' + branch, null, cb);\n    }\n    /**\n     * Get a commit from the repository\n     * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\n     * @param {string} sha - the sha for the commit to fetch\n     * @param {Requestable.callback} cb - will receive the commit data\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getCommit',\n    value: function getCommit(sha, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/git/commits/' + sha, null, cb);\n    }\n    /**\n     * List the commits on a repository, optionally filtering by path, author or time range\n     * @see https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\n     * @param {Object} [options] - the filtering options for commits\n     * @param {string} [options.sha] - the SHA or branch to start from\n     * @param {string} [options.path] - the path to search on\n     * @param {string} [options.author] - the commit author\n     * @param {(Date|string)} [options.since] - only commits after this date will be returned\n     * @param {(Date|string)} [options.until] - only commits before this date will be returned\n     * @param {Requestable.callback} cb - will receive the list of commits found matching the criteria\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listCommits',\n    value: function listCommits(options, cb) {\n      options = options || {};\n\n      if (typeof options === 'function') {\n        cb = options;\n        options = {};\n      }\n\n      options.since = this._dateToISO(options.since);\n      options.until = this._dateToISO(options.until);\n      return this._request('GET', '/repos/' + this.__fullname + '/commits', options, cb);\n    }\n    /**\n     * Gets a single commit information for a repository\n     * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\n     * @param {string} ref - the reference for the commit-ish\n     * @param {Requestable.callback} cb - will receive the commit information\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getSingleCommit',\n    value: function getSingleCommit(ref, cb) {\n      ref = ref || '';\n      return this._request('GET', '/repos/' + this.__fullname + '/commits/' + ref, null, cb);\n    }\n    /**\n     * Get tha sha for a particular object in the repository. This is a convenience function\n     * @see https://developer.github.com/v3/repos/contents/#get-contents\n     * @param {string} [branch] - the branch to look in, or the repository's default branch if omitted\n     * @param {string} path - the path of the file or directory\n     * @param {Requestable.callback} cb - will receive a description of the requested object, including a `SHA` property\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getSha',\n    value: function getSha(branch, path, cb) {\n      branch = branch ? '?ref=' + branch : '';\n      return this._request('GET', '/repos/' + this.__fullname + '/contents/' + path + branch, null, cb);\n    }\n    /**\n     * List the commit statuses for a particular sha, branch, or tag\n     * @see https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref\n     * @param {string} sha - the sha, branch, or tag to get statuses for\n     * @param {Requestable.callback} cb - will receive the list of statuses\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listStatuses',\n    value: function listStatuses(sha, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/commits/' + sha + '/statuses', null, cb);\n    }\n    /**\n     * Get the combined view of commit statuses for a particular sha, branch, or tag\n     * @see https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n     * @param {string} sha - the sha, branch, or tag to get the combined status for\n     * @param {Requestable.callback} cb - will receive the combined status\n     * @returns {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getCombinedStatus',\n    value: function getCombinedStatus(sha, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/commits/' + sha + '/status', null, cb);\n    }\n    /**\n     * Get a description of a git tree\n     * @see https://developer.github.com/v3/git/trees/#get-a-tree\n     * @param {string} treeSHA - the SHA of the tree to fetch\n     * @param {Requestable.callback} cb - will receive the callback data\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getTree',\n    value: function getTree(treeSHA, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/git/trees/' + treeSHA, null, cb);\n    }\n    /**\n     * Create a blob\n     * @see https://developer.github.com/v3/git/blobs/#create-a-blob\n     * @param {(string|Buffer|Blob)} content - the content to add to the repository\n     * @param {Requestable.callback} cb - will receive the details of the created blob\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createBlob',\n    value: function createBlob(content, cb) {\n      var postBody = this._getContentObject(content);\n\n      log('sending content', postBody);\n      return this._request('POST', '/repos/' + this.__fullname + '/git/blobs', postBody, cb);\n    }\n    /**\n     * Get the object that represents the provided content\n     * @param {string|Buffer|Blob} content - the content to send to the server\n     * @return {Object} the representation of `content` for the GitHub API\n     */\n\n  }, {\n    key: '_getContentObject',\n    value: function _getContentObject(content) {\n      if (typeof content === 'string') {\n        log('contet is a string');\n        return {\n          content: _utf2.default.encode(content),\n          encoding: 'utf-8'\n        };\n      } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\n        log('We appear to be in Node');\n        return {\n          content: content.toString('base64'),\n          encoding: 'base64'\n        };\n      } else if (typeof Blob !== 'undefined' && content instanceof Blob) {\n        log('We appear to be in the browser');\n        return {\n          content: _jsBase.Base64.encode(content),\n          encoding: 'base64'\n        };\n      } else {\n        // eslint-disable-line\n        log('Not sure what this content is: ' + (typeof content === 'undefined' ? 'undefined' : _typeof(content)) + ', ' + JSON.stringify(content));\n        throw new Error('Unknown content passed to postBlob. Must be string or Buffer (node) or Blob (web)');\n      }\n    }\n    /**\n     * Update a tree in Git\n     * @see https://developer.github.com/v3/git/trees/#create-a-tree\n     * @param {string} baseTreeSHA - the SHA of the tree to update\n     * @param {string} path - the path for the new file\n     * @param {string} blobSHA - the SHA for the blob to put at `path`\n     * @param {Requestable.callback} cb - will receive the new tree that is created\n     * @return {Promise} - the promise for the http request\n     * @deprecated use {@link Repository#createTree} instead\n     */\n\n  }, {\n    key: 'updateTree',\n    value: function updateTree(baseTreeSHA, path, blobSHA, cb) {\n      var newTree = {\n        base_tree: baseTreeSHA,\n        // eslint-disable-line\n        tree: [{\n          path: path,\n          sha: blobSHA,\n          mode: '100644',\n          type: 'blob'\n        }]\n      };\n      return this._request('POST', '/repos/' + this.__fullname + '/git/trees', newTree, cb);\n    }\n    /**\n     * Create a new tree in git\n     * @see https://developer.github.com/v3/git/trees/#create-a-tree\n     * @param {Object} tree - the tree to create\n     * @param {string} baseSHA - the root sha of the tree\n     * @param {Requestable.callback} cb - will receive the new tree that is created\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createTree',\n    value: function createTree(tree, baseSHA, cb) {\n      return this._request('POST', '/repos/' + this.__fullname + '/git/trees', {\n        tree: tree,\n        base_tree: baseSHA // eslint-disable-line camelcase\n\n      }, cb);\n    }\n    /**\n     * Add a commit to the repository\n     * @see https://developer.github.com/v3/git/commits/#create-a-commit\n     * @param {string} parent - the SHA of the parent commit\n     * @param {string} tree - the SHA of the tree for this commit\n     * @param {string} message - the commit message\n     * @param {Object} [options] - commit options\n     * @param {Object} [options.author] - the author of the commit\n     * @param {Object} [options.commiter] - the committer\n     * @param {Requestable.callback} cb - will receive the commit that is created\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'commit',\n    value: function commit(parent, tree, message, options, cb) {\n      var _this2 = this;\n\n      if (typeof options === 'function') {\n        cb = options;\n        options = {};\n      }\n\n      var data = {\n        message: message,\n        tree: tree,\n        parents: [parent]\n      };\n      data = Object.assign({}, options, data);\n      return this._request('POST', '/repos/' + this.__fullname + '/git/commits', data, cb).then(function (response) {\n        _this2.__currentTree.sha = response.data.sha; // Update latest commit\n\n        return response;\n      });\n    }\n    /**\n     * Update a ref\n     * @see https://developer.github.com/v3/git/refs/#update-a-reference\n     * @param {string} ref - the ref to update\n     * @param {string} commitSHA - the SHA to point the reference to\n     * @param {boolean} force - indicates whether to force or ensure a fast-forward update\n     * @param {Requestable.callback} cb - will receive the updated ref back\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'updateHead',\n    value: function updateHead(ref, commitSHA, force, cb) {\n      return this._request('PATCH', '/repos/' + this.__fullname + '/git/refs/' + ref, {\n        sha: commitSHA,\n        force: force\n      }, cb);\n    }\n    /**\n     * Update commit status\n     * @see https://developer.github.com/v3/repos/statuses/\n     * @param {string} commitSHA - the SHA of the commit that should be updated\n     * @param {object} options - Commit status parameters\n     * @param {string} options.state - The state of the status. Can be one of: pending, success, error, or failure.\n     * @param {string} [options.target_url] - The target URL to associate with this status.\n     * @param {string} [options.description] - A short description of the status.\n     * @param {string} [options.context] - A string label to differentiate this status among CI systems.\n     * @param {Requestable.callback} cb - will receive the updated commit back\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'updateStatus',\n    value: function updateStatus(commitSHA, options, cb) {\n      return this._request('POST', '/repos/' + this.__fullname + '/statuses/' + commitSHA, options, cb);\n    }\n    /**\n     * Update repository information\n     * @see https://developer.github.com/v3/repos/#edit\n     * @param {object} options - New parameters that will be set to the repository\n     * @param {string} options.name - Name of the repository\n     * @param {string} [options.description] - A short description of the repository\n     * @param {string} [options.homepage] - A URL with more information about the repository\n     * @param {boolean} [options.private] - Either true to make the repository private, or false to make it public.\n     * @param {boolean} [options.has_issues] - Either true to enable issues for this repository, false to disable them.\n     * @param {boolean} [options.has_wiki] - Either true to enable the wiki for this repository, false to disable it.\n     * @param {boolean} [options.has_downloads] - Either true to enable downloads, false to disable them.\n     * @param {string} [options.default_branch] - Updates the default branch for this repository.\n     * @param {Requestable.callback} cb - will receive the updated repository back\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'updateRepository',\n    value: function updateRepository(options, cb) {\n      return this._request('PATCH', '/repos/' + this.__fullname, options, cb);\n    }\n    /**\n      * Get information about the repository\n      * @see https://developer.github.com/v3/repos/#get\n      * @param {Requestable.callback} cb - will receive the information about the repository\n      * @return {Promise} - the promise for the http request\n      */\n\n  }, {\n    key: 'getDetails',\n    value: function getDetails(cb) {\n      return this._request('GET', '/repos/' + this.__fullname, null, cb);\n    }\n    /**\n     * List the contributors to the repository\n     * @see https://developer.github.com/v3/repos/#list-contributors\n     * @param {Requestable.callback} cb - will receive the list of contributors\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getContributors',\n    value: function getContributors(cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/contributors', null, cb);\n    }\n    /**\n     * List the contributor stats to the repository\n     * @see https://developer.github.com/v3/repos/#list-contributors\n     * @param {Requestable.callback} cb - will receive the list of contributors\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getContributorStats',\n    value: function getContributorStats(cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/stats/contributors', null, cb);\n    }\n    /**\n     * List the users who are collaborators on the repository. The currently authenticated user must have\n     * push access to use this method\n     * @see https://developer.github.com/v3/repos/collaborators/#list-collaborators\n     * @param {Requestable.callback} cb - will receive the list of collaborators\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getCollaborators',\n    value: function getCollaborators(cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/collaborators', null, cb);\n    }\n    /**\n     * Check if a user is a collaborator on the repository\n     * @see https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator\n     * @param {string} username - the user to check\n     * @param {Requestable.callback} cb - will receive true if the user is a collaborator and false if they are not\n     * @return {Promise} - the promise for the http request {Boolean} [description]\n     */\n\n  }, {\n    key: 'isCollaborator',\n    value: function isCollaborator(username, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/collaborators/' + username, null, cb);\n    }\n    /**\n     * Get the contents of a repository\n     * @see https://developer.github.com/v3/repos/contents/#get-contents\n     * @param {string} ref - the ref to check\n     * @param {string} path - the path containing the content to fetch\n     * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\n     * @param {Requestable.callback} cb - will receive the fetched data\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getContents',\n    value: function getContents(ref, path, raw, cb) {\n      path = path ? '' + encodeURI(path) : '';\n      return this._request('GET', '/repos/' + this.__fullname + '/contents/' + path, {\n        ref: ref\n      }, cb, raw);\n    }\n    /**\n     * Get the README of a repository\n     * @see https://developer.github.com/v3/repos/contents/#get-the-readme\n     * @param {string} ref - the ref to check\n     * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\n     * @param {Requestable.callback} cb - will receive the fetched data\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getReadme',\n    value: function getReadme(ref, raw, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/readme', {\n        ref: ref\n      }, cb, raw);\n    }\n    /**\n     * Fork a repository\n     * @see https://developer.github.com/v3/repos/forks/#create-a-fork\n     * @param {Requestable.callback} cb - will receive the information about the newly created fork\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'fork',\n    value: function fork(cb) {\n      return this._request('POST', '/repos/' + this.__fullname + '/forks', null, cb);\n    }\n    /**\n     * Fork a repository to an organization\n     * @see https://developer.github.com/v3/repos/forks/#create-a-fork\n     * @param {String} org - organization where you'd like to create the fork.\n     * @param {Requestable.callback} cb - will receive the information about the newly created fork\n     * @return {Promise} - the promise for the http request\n     *\n     */\n\n  }, {\n    key: 'forkToOrg',\n    value: function forkToOrg(org, cb) {\n      return this._request('POST', '/repos/' + this.__fullname + '/forks?organization=' + org, null, cb);\n    }\n    /**\n     * List a repository's forks\n     * @see https://developer.github.com/v3/repos/forks/#list-forks\n     * @param {Requestable.callback} cb - will receive the list of repositories forked from this one\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listForks',\n    value: function listForks(cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/forks', null, cb);\n    }\n    /**\n     * Create a new branch from an existing branch.\n     * @param {string} [oldBranch=master] - the name of the existing branch\n     * @param {string} newBranch - the name of the new branch\n     * @param {Requestable.callback} cb - will receive the commit data for the head of the new branch\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createBranch',\n    value: function createBranch(oldBranch, newBranch, cb) {\n      var _this3 = this;\n\n      if (typeof newBranch === 'function') {\n        cb = newBranch;\n        newBranch = oldBranch;\n        oldBranch = 'master';\n      }\n\n      return this.getRef('heads/' + oldBranch).then(function (response) {\n        var sha = response.data.object.sha;\n        return _this3.createRef({\n          sha: sha,\n          ref: 'refs/heads/' + newBranch\n        }, cb);\n      });\n    }\n    /**\n     * Create a new pull request\n     * @see https://developer.github.com/v3/pulls/#create-a-pull-request\n     * @param {Object} options - the pull request description\n     * @param {Requestable.callback} cb - will receive the new pull request\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createPullRequest',\n    value: function createPullRequest(options, cb) {\n      return this._request('POST', '/repos/' + this.__fullname + '/pulls', options, cb);\n    }\n    /**\n     * Update a pull request\n     * @see https://developer.github.com/v3/pulls/#update-a-pull-request\n     * @param {number|string} number - the number of the pull request to update\n     * @param {Object} options - the pull request description\n     * @param {Requestable.callback} [cb] - will receive the pull request information\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'updatePullRequest',\n    value: function updatePullRequest(number, options, cb) {\n      return this._request('PATCH', '/repos/' + this.__fullname + '/pulls/' + number, options, cb);\n    }\n    /**\n     * List the hooks for the repository\n     * @see https://developer.github.com/v3/repos/hooks/#list-hooks\n     * @param {Requestable.callback} cb - will receive the list of hooks\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listHooks',\n    value: function listHooks(cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/hooks', null, cb);\n    }\n    /**\n     * Get a hook for the repository\n     * @see https://developer.github.com/v3/repos/hooks/#get-single-hook\n     * @param {number} id - the id of the webook\n     * @param {Requestable.callback} cb - will receive the details of the webook\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getHook',\n    value: function getHook(id, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/hooks/' + id, null, cb);\n    }\n    /**\n     * Add a new hook to the repository\n     * @see https://developer.github.com/v3/repos/hooks/#create-a-hook\n     * @param {Object} options - the configuration describing the new hook\n     * @param {Requestable.callback} cb - will receive the new webhook\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createHook',\n    value: function createHook(options, cb) {\n      return this._request('POST', '/repos/' + this.__fullname + '/hooks', options, cb);\n    }\n    /**\n     * Edit an existing webhook\n     * @see https://developer.github.com/v3/repos/hooks/#edit-a-hook\n     * @param {number} id - the id of the webhook\n     * @param {Object} options - the new description of the webhook\n     * @param {Requestable.callback} cb - will receive the updated webhook\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'updateHook',\n    value: function updateHook(id, options, cb) {\n      return this._request('PATCH', '/repos/' + this.__fullname + '/hooks/' + id, options, cb);\n    }\n    /**\n     * Delete a webhook\n     * @see https://developer.github.com/v3/repos/hooks/#delete-a-hook\n     * @param {number} id - the id of the webhook to be deleted\n     * @param {Requestable.callback} cb - will receive true if the call is successful\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'deleteHook',\n    value: function deleteHook(id, cb) {\n      return this._request('DELETE', '/repos/' + this.__fullname + '/hooks/' + id, null, cb);\n    }\n    /**\n     * List the deploy keys for the repository\n     * @see https://developer.github.com/v3/repos/keys/#list-deploy-keys\n     * @param {Requestable.callback} cb - will receive the list of deploy keys\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listKeys',\n    value: function listKeys(cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/keys', null, cb);\n    }\n    /**\n     * Get a deploy key for the repository\n     * @see https://developer.github.com/v3/repos/keys/#get-a-deploy-key\n     * @param {number} id - the id of the deploy key\n     * @param {Requestable.callback} cb - will receive the details of the deploy key\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getKey',\n    value: function getKey(id, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/keys/' + id, null, cb);\n    }\n    /**\n     * Add a new deploy key to the repository\n     * @see https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key\n     * @param {Object} options - the configuration describing the new deploy key\n     * @param {Requestable.callback} cb - will receive the new deploy key\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createKey',\n    value: function createKey(options, cb) {\n      return this._request('POST', '/repos/' + this.__fullname + '/keys', options, cb);\n    }\n    /**\n     * Delete a deploy key\n     * @see https://developer.github.com/v3/repos/keys/#remove-a-deploy-key\n     * @param {number} id - the id of the deploy key to be deleted\n     * @param {Requestable.callback} cb - will receive true if the call is successful\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'deleteKey',\n    value: function deleteKey(id, cb) {\n      return this._request('DELETE', '/repos/' + this.__fullname + '/keys/' + id, null, cb);\n    }\n    /**\n     * Delete a file from a branch\n     * @see https://developer.github.com/v3/repos/contents/#delete-a-file\n     * @param {string} branch - the branch to delete from, or the default branch if not specified\n     * @param {string} path - the path of the file to remove\n     * @param {Requestable.callback} cb - will receive the commit in which the delete occurred\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'deleteFile',\n    value: function deleteFile(branch, path, cb) {\n      var _this4 = this;\n\n      return this.getSha(branch, path).then(function (response) {\n        var deleteCommit = {\n          message: 'Delete the file at \\'' + path + '\\'',\n          sha: response.data.sha,\n          branch: branch\n        };\n        return _this4._request('DELETE', '/repos/' + _this4.__fullname + '/contents/' + path, deleteCommit, cb);\n      });\n    }\n    /**\n     * Change all references in a repo from oldPath to new_path\n     * @param {string} branch - the branch to carry out the reference change, or the default branch if not specified\n     * @param {string} oldPath - original path\n     * @param {string} newPath - new reference path\n     * @param {Requestable.callback} cb - will receive the commit in which the move occurred\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'move',\n    value: function move(branch, oldPath, newPath, cb) {\n      var _this5 = this;\n\n      var oldSha = void 0;\n      return this.getRef('heads/' + branch).then(function (_ref) {\n        var object = _ref.data.object;\n        return _this5.getTree(object.sha + '?recursive=true');\n      }).then(function (_ref2) {\n        var _ref2$data = _ref2.data,\n            tree = _ref2$data.tree,\n            sha = _ref2$data.sha;\n        oldSha = sha;\n        var newTree = tree.map(function (ref) {\n          if (ref.path === oldPath) {\n            ref.path = newPath;\n          }\n\n          if (ref.type === 'tree') {\n            delete ref.sha;\n          }\n\n          return ref;\n        });\n        return _this5.createTree(newTree);\n      }).then(function (_ref3) {\n        var tree = _ref3.data;\n        return _this5.commit(oldSha, tree.sha, 'Renamed \\'' + oldPath + '\\' to \\'' + newPath + '\\'');\n      }).then(function (_ref4) {\n        var commit = _ref4.data;\n        return _this5.updateHead('heads/' + branch, commit.sha, true, cb);\n      });\n    }\n    /**\n     * Write a file to the repository\n     * @see https://developer.github.com/v3/repos/contents/#update-a-file\n     * @param {string} branch - the name of the branch\n     * @param {string} path - the path for the file\n     * @param {string} content - the contents of the file\n     * @param {string} message - the commit message\n     * @param {Object} [options] - commit options\n     * @param {Object} [options.author] - the author of the commit\n     * @param {Object} [options.commiter] - the committer\n     * @param {boolean} [options.encode] - true if the content should be base64 encoded\n     * @param {Requestable.callback} cb - will receive the new commit\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'writeFile',\n    value: function writeFile(branch, path, content, message, options, cb) {\n      var _this6 = this;\n\n      if (typeof options === 'function') {\n        cb = options;\n        options = {};\n      }\n\n      var filePath = path ? encodeURI(path) : '';\n      var shouldEncode = options.encode !== false;\n      var commit = {\n        branch: branch,\n        message: message,\n        author: options.author,\n        committer: options.committer,\n        content: shouldEncode ? _jsBase.Base64.encode(content) : content\n      };\n      return this.getSha(branch, filePath).then(function (response) {\n        commit.sha = response.data.sha;\n        return _this6._request('PUT', '/repos/' + _this6.__fullname + '/contents/' + filePath, commit, cb);\n      }, function () {\n        return _this6._request('PUT', '/repos/' + _this6.__fullname + '/contents/' + filePath, commit, cb);\n      });\n    }\n    /**\n     * Check if a repository is starred by you\n     * @see https://developer.github.com/v3/activity/starring/#check-if-you-are-starring-a-repository\n     * @param {Requestable.callback} cb - will receive true if the repository is starred and false if the repository\n     *                                  is not starred\n     * @return {Promise} - the promise for the http request {Boolean} [description]\n     */\n\n  }, {\n    key: 'isStarred',\n    value: function isStarred(cb) {\n      return this._request204or404('/user/starred/' + this.__fullname, null, cb);\n    }\n    /**\n     * Star a repository\n     * @see https://developer.github.com/v3/activity/starring/#star-a-repository\n     * @param {Requestable.callback} cb - will receive true if the repository is starred\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'star',\n    value: function star(cb) {\n      return this._request('PUT', '/user/starred/' + this.__fullname, null, cb);\n    }\n    /**\n     * Unstar a repository\n     * @see https://developer.github.com/v3/activity/starring/#unstar-a-repository\n     * @param {Requestable.callback} cb - will receive true if the repository is unstarred\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'unstar',\n    value: function unstar(cb) {\n      return this._request('DELETE', '/user/starred/' + this.__fullname, null, cb);\n    }\n    /**\n     * Create a new release\n     * @see https://developer.github.com/v3/repos/releases/#create-a-release\n     * @param {Object} options - the description of the release\n     * @param {Requestable.callback} cb - will receive the newly created release\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createRelease',\n    value: function createRelease(options, cb) {\n      return this._request('POST', '/repos/' + this.__fullname + '/releases', options, cb);\n    }\n    /**\n     * Edit a release\n     * @see https://developer.github.com/v3/repos/releases/#edit-a-release\n     * @param {string} id - the id of the release\n     * @param {Object} options - the description of the release\n     * @param {Requestable.callback} cb - will receive the modified release\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'updateRelease',\n    value: function updateRelease(id, options, cb) {\n      return this._request('PATCH', '/repos/' + this.__fullname + '/releases/' + id, options, cb);\n    }\n    /**\n     * Get information about all releases\n     * @see https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository\n     * @param {Requestable.callback} cb - will receive the release information\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listReleases',\n    value: function listReleases(cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/releases', null, cb);\n    }\n    /**\n     * Get information about a release\n     * @see https://developer.github.com/v3/repos/releases/#get-a-single-release\n     * @param {string} id - the id of the release\n     * @param {Requestable.callback} cb - will receive the release information\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getRelease',\n    value: function getRelease(id, cb) {\n      return this._request('GET', '/repos/' + this.__fullname + '/releases/' + id, null, cb);\n    }\n    /**\n     * Delete a release\n     * @see https://developer.github.com/v3/repos/releases/#delete-a-release\n     * @param {string} id - the release to be deleted\n     * @param {Requestable.callback} cb - will receive true if the operation is successful\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'deleteRelease',\n    value: function deleteRelease(id, cb) {\n      return this._request('DELETE', '/repos/' + this.__fullname + '/releases/' + id, null, cb);\n    }\n    /**\n     * Merge a pull request\n     * @see https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\n     * @param {number|string} number - the number of the pull request to merge\n     * @param {Object} options - the merge options for the pull request\n     * @param {Requestable.callback} [cb] - will receive the merge information if the operation is successful\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'mergePullRequest',\n    value: function mergePullRequest(number, options, cb) {\n      return this._request('PUT', '/repos/' + this.__fullname + '/pulls/' + number + '/merge', options, cb);\n    }\n    /**\n     * Get information about all projects\n     * @see https://developer.github.com/v3/projects/#list-repository-projects\n     * @param {Requestable.callback} [cb] - will receive the list of projects\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listProjects',\n    value: function listProjects(cb) {\n      return this._requestAllPages('/repos/' + this.__fullname + '/projects', {\n        AcceptHeader: 'inertia-preview'\n      }, cb);\n    }\n    /**\n     * Create a new project\n     * @see https://developer.github.com/v3/projects/#create-a-repository-project\n     * @param {Object} options - the description of the project\n     * @param {Requestable.callback} cb - will receive the newly created project\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createProject',\n    value: function createProject(options, cb) {\n      options = options || {};\n      options.AcceptHeader = 'inertia-preview';\n      return this._request('POST', '/repos/' + this.__fullname + '/projects', options, cb);\n    }\n  }]);\n\n  return Repository;\n}(_Requestable3.default);\n\nmodule.exports = Repository; //# sourceMappingURL=Repository.js.map","map":{"version":3,"sources":["Repository.js"],"names":["log","Repository","Requestable","branch","sha","ref","cb","options","number","base","head","path","treeSHA","content","postBody","Utf8","encoding","Base64","JSON","baseTreeSHA","blobSHA","newTree","base_tree","tree","mode","type","baseSHA","parent","message","data","parents","Object","response","commitSHA","force","username","raw","encodeURI","org","oldBranch","newBranch","id","deleteCommit","oldPath","newPath","oldSha","object","commit","filePath","shouldEncode","author","committer","AcceptHeader","module"],"mappings":"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","sourcesContent":["/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport Utf8 from 'utf8';\nimport {\n   Base64,\n} from 'js-base64';\nimport debug from 'debug';\nconst log = debug('github:repository');\n\n/**\n * Repository encapsulates the functionality to create, query, and modify files.\n */\nclass Repository extends Requestable {\n   /**\n    * Create a Repository.\n    * @param {string} fullname - the full name of the repository\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(fullname, auth, apiBase) {\n      super(auth, apiBase);\n      this.__fullname = fullname;\n      this.__currentTree = {\n         branch: null,\n         sha: null,\n      };\n   }\n\n   /**\n    * Get a reference\n    * @see https://developer.github.com/v3/git/refs/#get-a-reference\n    * @param {string} ref - the reference to get\n    * @param {Requestable.callback} [cb] - will receive the reference's refSpec or a list of refSpecs that match `ref`\n    * @return {Promise} - the promise for the http request\n    */\n   getRef(ref, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/git/refs/${ref}`, null, cb);\n   }\n\n   /**\n    * Create a reference\n    * @see https://developer.github.com/v3/git/refs/#create-a-reference\n    * @param {Object} options - the object describing the ref\n    * @param {Requestable.callback} [cb] - will receive the ref\n    * @return {Promise} - the promise for the http request\n    */\n   createRef(options, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/git/refs`, options, cb);\n   }\n\n   /**\n    * Delete a reference\n    * @see https://developer.github.com/v3/git/refs/#delete-a-reference\n    * @param {string} ref - the name of the ref to delte\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteRef(ref, cb) {\n      return this._request('DELETE', `/repos/${this.__fullname}/git/refs/${ref}`, null, cb);\n   }\n\n   /**\n    * Delete a repository\n    * @see https://developer.github.com/v3/repos/#delete-a-repository\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteRepo(cb) {\n      return this._request('DELETE', `/repos/${this.__fullname}`, null, cb);\n   }\n\n   /**\n    * List the tags on a repository\n    * @see https://developer.github.com/v3/repos/#list-tags\n    * @param {Requestable.callback} [cb] - will receive the tag data\n    * @return {Promise} - the promise for the http request\n    */\n   listTags(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/tags`, null, cb);\n   }\n\n   /**\n    * List the open pull requests on the repository\n    * @see https://developer.github.com/v3/pulls/#list-pull-requests\n    * @param {Object} options - options to filter the search\n    * @param {Requestable.callback} [cb] - will receive the list of PRs\n    * @return {Promise} - the promise for the http request\n    */\n   listPullRequests(options, cb) {\n      options = options || {};\n      return this._request('GET', `/repos/${this.__fullname}/pulls`, options, cb);\n   }\n\n   /**\n    * Get information about a specific pull request\n    * @see https://developer.github.com/v3/pulls/#get-a-single-pull-request\n    * @param {number} number - the PR you wish to fetch\n    * @param {Requestable.callback} [cb] - will receive the PR from the API\n    * @return {Promise} - the promise for the http request\n    */\n   getPullRequest(number, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/pulls/${number}`, null, cb);\n   }\n\n   /**\n    * List the files of a specific pull request\n    * @see https://developer.github.com/v3/pulls/#list-pull-requests-files\n    * @param {number|string} number - the PR you wish to fetch\n    * @param {Requestable.callback} [cb] - will receive the list of files from the API\n    * @return {Promise} - the promise for the http request\n    */\n   listPullRequestFiles(number, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/pulls/${number}/files`, null, cb);\n   }\n\n   /**\n    * Compare two branches/commits/repositories\n    * @see https://developer.github.com/v3/repos/commits/#compare-two-commits\n    * @param {string} base - the base commit\n    * @param {string} head - the head commit\n    * @param {Requestable.callback} cb - will receive the comparison\n    * @return {Promise} - the promise for the http request\n    */\n   compareBranches(base, head, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/compare/${base}...${head}`, null, cb);\n   }\n\n   /**\n    * List all the branches for the repository\n    * @see https://developer.github.com/v3/repos/#list-branches\n    * @param {Requestable.callback} cb - will receive the list of branches\n    * @return {Promise} - the promise for the http request\n    */\n   listBranches(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/branches`, null, cb);\n   }\n\n   /**\n    * Get a raw blob from the repository\n    * @see https://developer.github.com/v3/git/blobs/#get-a-blob\n    * @param {string} sha - the sha of the blob to fetch\n    * @param {Requestable.callback} cb - will receive the blob from the API\n    * @return {Promise} - the promise for the http request\n    */\n   getBlob(sha, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/git/blobs/${sha}`, null, cb, 'raw');\n   }\n\n   /**\n    * Get a single branch\n    * @see https://developer.github.com/v3/repos/branches/#get-branch\n    * @param {string} branch - the name of the branch to fetch\n    * @param {Requestable.callback} cb - will receive the branch from the API\n    * @returns {Promise} - the promise for the http request\n    */\n   getBranch(branch, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/branches/${branch}`, null, cb);\n   }\n\n   /**\n    * Get a commit from the repository\n    * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\n    * @param {string} sha - the sha for the commit to fetch\n    * @param {Requestable.callback} cb - will receive the commit data\n    * @return {Promise} - the promise for the http request\n    */\n   getCommit(sha, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/git/commits/${sha}`, null, cb);\n   }\n\n   /**\n    * List the commits on a repository, optionally filtering by path, author or time range\n    * @see https://developer.github.com/v3/repos/commits/#list-commits-on-a-repository\n    * @param {Object} [options] - the filtering options for commits\n    * @param {string} [options.sha] - the SHA or branch to start from\n    * @param {string} [options.path] - the path to search on\n    * @param {string} [options.author] - the commit author\n    * @param {(Date|string)} [options.since] - only commits after this date will be returned\n    * @param {(Date|string)} [options.until] - only commits before this date will be returned\n    * @param {Requestable.callback} cb - will receive the list of commits found matching the criteria\n    * @return {Promise} - the promise for the http request\n    */\n   listCommits(options, cb) {\n      options = options || {};\n      if (typeof options === 'function') {\n         cb = options;\n         options = {};\n      }\n      options.since = this._dateToISO(options.since);\n      options.until = this._dateToISO(options.until);\n\n      return this._request('GET', `/repos/${this.__fullname}/commits`, options, cb);\n   }\n\n    /**\n     * Gets a single commit information for a repository\n     * @see https://developer.github.com/v3/repos/commits/#get-a-single-commit\n     * @param {string} ref - the reference for the commit-ish\n     * @param {Requestable.callback} cb - will receive the commit information\n     * @return {Promise} - the promise for the http request\n     */\n   getSingleCommit(ref, cb) {\n      ref = ref || '';\n      return this._request('GET', `/repos/${this.__fullname}/commits/${ref}`, null, cb);\n   }\n\n   /**\n    * Get tha sha for a particular object in the repository. This is a convenience function\n    * @see https://developer.github.com/v3/repos/contents/#get-contents\n    * @param {string} [branch] - the branch to look in, or the repository's default branch if omitted\n    * @param {string} path - the path of the file or directory\n    * @param {Requestable.callback} cb - will receive a description of the requested object, including a `SHA` property\n    * @return {Promise} - the promise for the http request\n    */\n   getSha(branch, path, cb) {\n      branch = branch ? `?ref=${branch}` : '';\n      return this._request('GET', `/repos/${this.__fullname}/contents/${path}${branch}`, null, cb);\n   }\n\n   /**\n    * List the commit statuses for a particular sha, branch, or tag\n    * @see https://developer.github.com/v3/repos/statuses/#list-statuses-for-a-specific-ref\n    * @param {string} sha - the sha, branch, or tag to get statuses for\n    * @param {Requestable.callback} cb - will receive the list of statuses\n    * @return {Promise} - the promise for the http request\n    */\n   listStatuses(sha, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/commits/${sha}/statuses`, null, cb);\n   }\n\n   /**\n    * Get the combined view of commit statuses for a particular sha, branch, or tag\n    * @see https://developer.github.com/v3/repos/statuses/#get-the-combined-status-for-a-specific-ref\n    * @param {string} sha - the sha, branch, or tag to get the combined status for\n    * @param {Requestable.callback} cb - will receive the combined status\n    * @returns {Promise} - the promise for the http request\n    */\n   getCombinedStatus(sha, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/commits/${sha}/status`, null, cb);\n   }\n\n   /**\n    * Get a description of a git tree\n    * @see https://developer.github.com/v3/git/trees/#get-a-tree\n    * @param {string} treeSHA - the SHA of the tree to fetch\n    * @param {Requestable.callback} cb - will receive the callback data\n    * @return {Promise} - the promise for the http request\n    */\n   getTree(treeSHA, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/git/trees/${treeSHA}`, null, cb);\n   }\n\n   /**\n    * Create a blob\n    * @see https://developer.github.com/v3/git/blobs/#create-a-blob\n    * @param {(string|Buffer|Blob)} content - the content to add to the repository\n    * @param {Requestable.callback} cb - will receive the details of the created blob\n    * @return {Promise} - the promise for the http request\n    */\n   createBlob(content, cb) {\n      let postBody = this._getContentObject(content);\n\n      log('sending content', postBody);\n      return this._request('POST', `/repos/${this.__fullname}/git/blobs`, postBody, cb);\n   }\n\n   /**\n    * Get the object that represents the provided content\n    * @param {string|Buffer|Blob} content - the content to send to the server\n    * @return {Object} the representation of `content` for the GitHub API\n    */\n   _getContentObject(content) {\n      if (typeof content === 'string') {\n         log('contet is a string');\n         return {\n            content: Utf8.encode(content),\n            encoding: 'utf-8',\n         };\n\n      } else if (typeof Buffer !== 'undefined' && content instanceof Buffer) {\n         log('We appear to be in Node');\n         return {\n            content: content.toString('base64'),\n            encoding: 'base64',\n         };\n\n      } else if (typeof Blob !== 'undefined' && content instanceof Blob) {\n         log('We appear to be in the browser');\n         return {\n            content: Base64.encode(content),\n            encoding: 'base64',\n         };\n\n      } else { // eslint-disable-line\n         log(`Not sure what this content is: ${typeof content}, ${JSON.stringify(content)}`);\n         throw new Error('Unknown content passed to postBlob. Must be string or Buffer (node) or Blob (web)');\n      }\n   }\n\n   /**\n    * Update a tree in Git\n    * @see https://developer.github.com/v3/git/trees/#create-a-tree\n    * @param {string} baseTreeSHA - the SHA of the tree to update\n    * @param {string} path - the path for the new file\n    * @param {string} blobSHA - the SHA for the blob to put at `path`\n    * @param {Requestable.callback} cb - will receive the new tree that is created\n    * @return {Promise} - the promise for the http request\n    * @deprecated use {@link Repository#createTree} instead\n    */\n   updateTree(baseTreeSHA, path, blobSHA, cb) {\n      let newTree = {\n         base_tree: baseTreeSHA, // eslint-disable-line\n         tree: [{\n            path: path,\n            sha: blobSHA,\n            mode: '100644',\n            type: 'blob',\n         }],\n      };\n\n      return this._request('POST', `/repos/${this.__fullname}/git/trees`, newTree, cb);\n   }\n\n   /**\n    * Create a new tree in git\n    * @see https://developer.github.com/v3/git/trees/#create-a-tree\n    * @param {Object} tree - the tree to create\n    * @param {string} baseSHA - the root sha of the tree\n    * @param {Requestable.callback} cb - will receive the new tree that is created\n    * @return {Promise} - the promise for the http request\n    */\n   createTree(tree, baseSHA, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/git/trees`, {\n         tree,\n         base_tree: baseSHA, // eslint-disable-line camelcase\n      }, cb);\n   }\n\n   /**\n    * Add a commit to the repository\n    * @see https://developer.github.com/v3/git/commits/#create-a-commit\n    * @param {string} parent - the SHA of the parent commit\n    * @param {string} tree - the SHA of the tree for this commit\n    * @param {string} message - the commit message\n    * @param {Object} [options] - commit options\n    * @param {Object} [options.author] - the author of the commit\n    * @param {Object} [options.commiter] - the committer\n    * @param {Requestable.callback} cb - will receive the commit that is created\n    * @return {Promise} - the promise for the http request\n    */\n   commit(parent, tree, message, options, cb) {\n      if (typeof options === 'function') {\n         cb = options;\n         options = {};\n      }\n\n      let data = {\n         message,\n         tree,\n         parents: [parent],\n      };\n\n      data = Object.assign({}, options, data);\n\n      return this._request('POST', `/repos/${this.__fullname}/git/commits`, data, cb)\n         .then((response) => {\n            this.__currentTree.sha = response.data.sha; // Update latest commit\n            return response;\n         });\n   }\n\n   /**\n    * Update a ref\n    * @see https://developer.github.com/v3/git/refs/#update-a-reference\n    * @param {string} ref - the ref to update\n    * @param {string} commitSHA - the SHA to point the reference to\n    * @param {boolean} force - indicates whether to force or ensure a fast-forward update\n    * @param {Requestable.callback} cb - will receive the updated ref back\n    * @return {Promise} - the promise for the http request\n    */\n   updateHead(ref, commitSHA, force, cb) {\n      return this._request('PATCH', `/repos/${this.__fullname}/git/refs/${ref}`, {\n         sha: commitSHA,\n         force: force,\n      }, cb);\n   }\n\n   /**\n    * Update commit status\n    * @see https://developer.github.com/v3/repos/statuses/\n    * @param {string} commitSHA - the SHA of the commit that should be updated\n    * @param {object} options - Commit status parameters\n    * @param {string} options.state - The state of the status. Can be one of: pending, success, error, or failure.\n    * @param {string} [options.target_url] - The target URL to associate with this status.\n    * @param {string} [options.description] - A short description of the status.\n    * @param {string} [options.context] - A string label to differentiate this status among CI systems.\n    * @param {Requestable.callback} cb - will receive the updated commit back\n    * @return {Promise} - the promise for the http request\n    */\n   updateStatus(commitSHA, options, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/statuses/${commitSHA}`, options, cb);\n   }\n\n   /**\n    * Update repository information\n    * @see https://developer.github.com/v3/repos/#edit\n    * @param {object} options - New parameters that will be set to the repository\n    * @param {string} options.name - Name of the repository\n    * @param {string} [options.description] - A short description of the repository\n    * @param {string} [options.homepage] - A URL with more information about the repository\n    * @param {boolean} [options.private] - Either true to make the repository private, or false to make it public.\n    * @param {boolean} [options.has_issues] - Either true to enable issues for this repository, false to disable them.\n    * @param {boolean} [options.has_wiki] - Either true to enable the wiki for this repository, false to disable it.\n    * @param {boolean} [options.has_downloads] - Either true to enable downloads, false to disable them.\n    * @param {string} [options.default_branch] - Updates the default branch for this repository.\n    * @param {Requestable.callback} cb - will receive the updated repository back\n    * @return {Promise} - the promise for the http request\n    */\n   updateRepository(options, cb) {\n      return this._request('PATCH', `/repos/${this.__fullname}`, options, cb);\n   }\n\n  /**\n    * Get information about the repository\n    * @see https://developer.github.com/v3/repos/#get\n    * @param {Requestable.callback} cb - will receive the information about the repository\n    * @return {Promise} - the promise for the http request\n    */\n   getDetails(cb) {\n      return this._request('GET', `/repos/${this.__fullname}`, null, cb);\n   }\n\n   /**\n    * List the contributors to the repository\n    * @see https://developer.github.com/v3/repos/#list-contributors\n    * @param {Requestable.callback} cb - will receive the list of contributors\n    * @return {Promise} - the promise for the http request\n    */\n   getContributors(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/contributors`, null, cb);\n   }\n\n   /**\n    * List the contributor stats to the repository\n    * @see https://developer.github.com/v3/repos/#list-contributors\n    * @param {Requestable.callback} cb - will receive the list of contributors\n    * @return {Promise} - the promise for the http request\n    */\n   getContributorStats(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/stats/contributors`, null, cb);\n   }\n\n   /**\n    * List the users who are collaborators on the repository. The currently authenticated user must have\n    * push access to use this method\n    * @see https://developer.github.com/v3/repos/collaborators/#list-collaborators\n    * @param {Requestable.callback} cb - will receive the list of collaborators\n    * @return {Promise} - the promise for the http request\n    */\n   getCollaborators(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/collaborators`, null, cb);\n   }\n\n   /**\n    * Check if a user is a collaborator on the repository\n    * @see https://developer.github.com/v3/repos/collaborators/#check-if-a-user-is-a-collaborator\n    * @param {string} username - the user to check\n    * @param {Requestable.callback} cb - will receive true if the user is a collaborator and false if they are not\n    * @return {Promise} - the promise for the http request {Boolean} [description]\n    */\n   isCollaborator(username, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/collaborators/${username}`, null, cb);\n   }\n\n   /**\n    * Get the contents of a repository\n    * @see https://developer.github.com/v3/repos/contents/#get-contents\n    * @param {string} ref - the ref to check\n    * @param {string} path - the path containing the content to fetch\n    * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\n    * @param {Requestable.callback} cb - will receive the fetched data\n    * @return {Promise} - the promise for the http request\n    */\n   getContents(ref, path, raw, cb) {\n      path = path ? `${encodeURI(path)}` : '';\n      return this._request('GET', `/repos/${this.__fullname}/contents/${path}`, {\n         ref,\n      }, cb, raw);\n   }\n\n   /**\n    * Get the README of a repository\n    * @see https://developer.github.com/v3/repos/contents/#get-the-readme\n    * @param {string} ref - the ref to check\n    * @param {boolean} raw - `true` if the results should be returned raw instead of GitHub's normalized format\n    * @param {Requestable.callback} cb - will receive the fetched data\n    * @return {Promise} - the promise for the http request\n    */\n   getReadme(ref, raw, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/readme`, {\n         ref,\n      }, cb, raw);\n   }\n\n   /**\n    * Fork a repository\n    * @see https://developer.github.com/v3/repos/forks/#create-a-fork\n    * @param {Requestable.callback} cb - will receive the information about the newly created fork\n    * @return {Promise} - the promise for the http request\n    */\n   fork(cb) {\n      return this._request('POST', `/repos/${this.__fullname}/forks`, null, cb);\n   }\n\n   /**\n    * Fork a repository to an organization\n    * @see https://developer.github.com/v3/repos/forks/#create-a-fork\n    * @param {String} org - organization where you'd like to create the fork.\n    * @param {Requestable.callback} cb - will receive the information about the newly created fork\n    * @return {Promise} - the promise for the http request\n    *\n    */\n   forkToOrg(org, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/forks?organization=${org}`, null, cb);\n   }\n\n   /**\n    * List a repository's forks\n    * @see https://developer.github.com/v3/repos/forks/#list-forks\n    * @param {Requestable.callback} cb - will receive the list of repositories forked from this one\n    * @return {Promise} - the promise for the http request\n    */\n   listForks(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/forks`, null, cb);\n   }\n\n   /**\n    * Create a new branch from an existing branch.\n    * @param {string} [oldBranch=master] - the name of the existing branch\n    * @param {string} newBranch - the name of the new branch\n    * @param {Requestable.callback} cb - will receive the commit data for the head of the new branch\n    * @return {Promise} - the promise for the http request\n    */\n   createBranch(oldBranch, newBranch, cb) {\n      if (typeof newBranch === 'function') {\n         cb = newBranch;\n         newBranch = oldBranch;\n         oldBranch = 'master';\n      }\n\n      return this.getRef(`heads/${oldBranch}`)\n         .then((response) => {\n            let sha = response.data.object.sha;\n            return this.createRef({\n               sha,\n               ref: `refs/heads/${newBranch}`,\n            }, cb);\n         });\n   }\n\n   /**\n    * Create a new pull request\n    * @see https://developer.github.com/v3/pulls/#create-a-pull-request\n    * @param {Object} options - the pull request description\n    * @param {Requestable.callback} cb - will receive the new pull request\n    * @return {Promise} - the promise for the http request\n    */\n   createPullRequest(options, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/pulls`, options, cb);\n   }\n\n   /**\n    * Update a pull request\n    * @see https://developer.github.com/v3/pulls/#update-a-pull-request\n    * @param {number|string} number - the number of the pull request to update\n    * @param {Object} options - the pull request description\n    * @param {Requestable.callback} [cb] - will receive the pull request information\n    * @return {Promise} - the promise for the http request\n    */\n   updatePullRequest(number, options, cb) {\n      return this._request('PATCH', `/repos/${this.__fullname}/pulls/${number}`, options, cb);\n   }\n\n   /**\n    * List the hooks for the repository\n    * @see https://developer.github.com/v3/repos/hooks/#list-hooks\n    * @param {Requestable.callback} cb - will receive the list of hooks\n    * @return {Promise} - the promise for the http request\n    */\n   listHooks(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/hooks`, null, cb);\n   }\n\n   /**\n    * Get a hook for the repository\n    * @see https://developer.github.com/v3/repos/hooks/#get-single-hook\n    * @param {number} id - the id of the webook\n    * @param {Requestable.callback} cb - will receive the details of the webook\n    * @return {Promise} - the promise for the http request\n    */\n   getHook(id, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/hooks/${id}`, null, cb);\n   }\n\n   /**\n    * Add a new hook to the repository\n    * @see https://developer.github.com/v3/repos/hooks/#create-a-hook\n    * @param {Object} options - the configuration describing the new hook\n    * @param {Requestable.callback} cb - will receive the new webhook\n    * @return {Promise} - the promise for the http request\n    */\n   createHook(options, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/hooks`, options, cb);\n   }\n\n   /**\n    * Edit an existing webhook\n    * @see https://developer.github.com/v3/repos/hooks/#edit-a-hook\n    * @param {number} id - the id of the webhook\n    * @param {Object} options - the new description of the webhook\n    * @param {Requestable.callback} cb - will receive the updated webhook\n    * @return {Promise} - the promise for the http request\n    */\n   updateHook(id, options, cb) {\n      return this._request('PATCH', `/repos/${this.__fullname}/hooks/${id}`, options, cb);\n   }\n\n   /**\n    * Delete a webhook\n    * @see https://developer.github.com/v3/repos/hooks/#delete-a-hook\n    * @param {number} id - the id of the webhook to be deleted\n    * @param {Requestable.callback} cb - will receive true if the call is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteHook(id, cb) {\n      return this._request('DELETE', `/repos/${this.__fullname}/hooks/${id}`, null, cb);\n   }\n\n   /**\n    * List the deploy keys for the repository\n    * @see https://developer.github.com/v3/repos/keys/#list-deploy-keys\n    * @param {Requestable.callback} cb - will receive the list of deploy keys\n    * @return {Promise} - the promise for the http request\n    */\n   listKeys(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/keys`, null, cb);\n   }\n\n   /**\n    * Get a deploy key for the repository\n    * @see https://developer.github.com/v3/repos/keys/#get-a-deploy-key\n    * @param {number} id - the id of the deploy key\n    * @param {Requestable.callback} cb - will receive the details of the deploy key\n    * @return {Promise} - the promise for the http request\n    */\n   getKey(id, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/keys/${id}`, null, cb);\n   }\n\n   /**\n    * Add a new deploy key to the repository\n    * @see https://developer.github.com/v3/repos/keys/#add-a-new-deploy-key\n    * @param {Object} options - the configuration describing the new deploy key\n    * @param {Requestable.callback} cb - will receive the new deploy key\n    * @return {Promise} - the promise for the http request\n    */\n   createKey(options, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/keys`, options, cb);\n   }\n\n   /**\n    * Delete a deploy key\n    * @see https://developer.github.com/v3/repos/keys/#remove-a-deploy-key\n    * @param {number} id - the id of the deploy key to be deleted\n    * @param {Requestable.callback} cb - will receive true if the call is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteKey(id, cb) {\n      return this._request('DELETE', `/repos/${this.__fullname}/keys/${id}`, null, cb);\n   }\n\n   /**\n    * Delete a file from a branch\n    * @see https://developer.github.com/v3/repos/contents/#delete-a-file\n    * @param {string} branch - the branch to delete from, or the default branch if not specified\n    * @param {string} path - the path of the file to remove\n    * @param {Requestable.callback} cb - will receive the commit in which the delete occurred\n    * @return {Promise} - the promise for the http request\n    */\n   deleteFile(branch, path, cb) {\n      return this.getSha(branch, path)\n         .then((response) => {\n            const deleteCommit = {\n               message: `Delete the file at '${path}'`,\n               sha: response.data.sha,\n               branch,\n            };\n            return this._request('DELETE', `/repos/${this.__fullname}/contents/${path}`, deleteCommit, cb);\n         });\n   }\n\n   /**\n    * Change all references in a repo from oldPath to new_path\n    * @param {string} branch - the branch to carry out the reference change, or the default branch if not specified\n    * @param {string} oldPath - original path\n    * @param {string} newPath - new reference path\n    * @param {Requestable.callback} cb - will receive the commit in which the move occurred\n    * @return {Promise} - the promise for the http request\n    */\n   move(branch, oldPath, newPath, cb) {\n      let oldSha;\n      return this.getRef(`heads/${branch}`)\n         .then(({data: {object}}) => this.getTree(`${object.sha}?recursive=true`))\n         .then(({data: {tree, sha}}) => {\n            oldSha = sha;\n            let newTree = tree.map((ref) => {\n               if (ref.path === oldPath) {\n                  ref.path = newPath;\n               }\n               if (ref.type === 'tree') {\n                  delete ref.sha;\n               }\n               return ref;\n            });\n            return this.createTree(newTree);\n         })\n         .then(({data: tree}) => this.commit(oldSha, tree.sha, `Renamed '${oldPath}' to '${newPath}'`))\n         .then(({data: commit}) => this.updateHead(`heads/${branch}`, commit.sha, true, cb));\n   }\n\n   /**\n    * Write a file to the repository\n    * @see https://developer.github.com/v3/repos/contents/#update-a-file\n    * @param {string} branch - the name of the branch\n    * @param {string} path - the path for the file\n    * @param {string} content - the contents of the file\n    * @param {string} message - the commit message\n    * @param {Object} [options] - commit options\n    * @param {Object} [options.author] - the author of the commit\n    * @param {Object} [options.commiter] - the committer\n    * @param {boolean} [options.encode] - true if the content should be base64 encoded\n    * @param {Requestable.callback} cb - will receive the new commit\n    * @return {Promise} - the promise for the http request\n    */\n   writeFile(branch, path, content, message, options, cb) {\n      if (typeof options === 'function') {\n         cb = options;\n         options = {};\n      }\n      let filePath = path ? encodeURI(path) : '';\n      let shouldEncode = options.encode !== false;\n      let commit = {\n         branch,\n         message,\n         author: options.author,\n         committer: options.committer,\n         content: shouldEncode ? Base64.encode(content) : content,\n      };\n\n      return this.getSha(branch, filePath)\n         .then((response) => {\n            commit.sha = response.data.sha;\n            return this._request('PUT', `/repos/${this.__fullname}/contents/${filePath}`, commit, cb);\n         }, () => {\n            return this._request('PUT', `/repos/${this.__fullname}/contents/${filePath}`, commit, cb);\n         });\n   }\n\n   /**\n    * Check if a repository is starred by you\n    * @see https://developer.github.com/v3/activity/starring/#check-if-you-are-starring-a-repository\n    * @param {Requestable.callback} cb - will receive true if the repository is starred and false if the repository\n    *                                  is not starred\n    * @return {Promise} - the promise for the http request {Boolean} [description]\n    */\n   isStarred(cb) {\n      return this._request204or404(`/user/starred/${this.__fullname}`, null, cb);\n   }\n\n   /**\n    * Star a repository\n    * @see https://developer.github.com/v3/activity/starring/#star-a-repository\n    * @param {Requestable.callback} cb - will receive true if the repository is starred\n    * @return {Promise} - the promise for the http request\n    */\n   star(cb) {\n      return this._request('PUT', `/user/starred/${this.__fullname}`, null, cb);\n   }\n\n   /**\n    * Unstar a repository\n    * @see https://developer.github.com/v3/activity/starring/#unstar-a-repository\n    * @param {Requestable.callback} cb - will receive true if the repository is unstarred\n    * @return {Promise} - the promise for the http request\n    */\n   unstar(cb) {\n      return this._request('DELETE', `/user/starred/${this.__fullname}`, null, cb);\n   }\n\n   /**\n    * Create a new release\n    * @see https://developer.github.com/v3/repos/releases/#create-a-release\n    * @param {Object} options - the description of the release\n    * @param {Requestable.callback} cb - will receive the newly created release\n    * @return {Promise} - the promise for the http request\n    */\n   createRelease(options, cb) {\n      return this._request('POST', `/repos/${this.__fullname}/releases`, options, cb);\n   }\n\n   /**\n    * Edit a release\n    * @see https://developer.github.com/v3/repos/releases/#edit-a-release\n    * @param {string} id - the id of the release\n    * @param {Object} options - the description of the release\n    * @param {Requestable.callback} cb - will receive the modified release\n    * @return {Promise} - the promise for the http request\n    */\n   updateRelease(id, options, cb) {\n      return this._request('PATCH', `/repos/${this.__fullname}/releases/${id}`, options, cb);\n   }\n\n   /**\n    * Get information about all releases\n    * @see https://developer.github.com/v3/repos/releases/#list-releases-for-a-repository\n    * @param {Requestable.callback} cb - will receive the release information\n    * @return {Promise} - the promise for the http request\n    */\n   listReleases(cb) {\n      return this._request('GET', `/repos/${this.__fullname}/releases`, null, cb);\n   }\n\n   /**\n    * Get information about a release\n    * @see https://developer.github.com/v3/repos/releases/#get-a-single-release\n    * @param {string} id - the id of the release\n    * @param {Requestable.callback} cb - will receive the release information\n    * @return {Promise} - the promise for the http request\n    */\n   getRelease(id, cb) {\n      return this._request('GET', `/repos/${this.__fullname}/releases/${id}`, null, cb);\n   }\n\n   /**\n    * Delete a release\n    * @see https://developer.github.com/v3/repos/releases/#delete-a-release\n    * @param {string} id - the release to be deleted\n    * @param {Requestable.callback} cb - will receive true if the operation is successful\n    * @return {Promise} - the promise for the http request\n    */\n   deleteRelease(id, cb) {\n      return this._request('DELETE', `/repos/${this.__fullname}/releases/${id}`, null, cb);\n   }\n\n   /**\n    * Merge a pull request\n    * @see https://developer.github.com/v3/pulls/#merge-a-pull-request-merge-button\n    * @param {number|string} number - the number of the pull request to merge\n    * @param {Object} options - the merge options for the pull request\n    * @param {Requestable.callback} [cb] - will receive the merge information if the operation is successful\n    * @return {Promise} - the promise for the http request\n    */\n   mergePullRequest(number, options, cb) {\n      return this._request('PUT', `/repos/${this.__fullname}/pulls/${number}/merge`, options, cb);\n   }\n\n   /**\n    * Get information about all projects\n    * @see https://developer.github.com/v3/projects/#list-repository-projects\n    * @param {Requestable.callback} [cb] - will receive the list of projects\n    * @return {Promise} - the promise for the http request\n    */\n   listProjects(cb) {\n      return this._requestAllPages(`/repos/${this.__fullname}/projects`, {AcceptHeader: 'inertia-preview'}, cb);\n   }\n\n   /**\n    * Create a new project\n    * @see https://developer.github.com/v3/projects/#create-a-repository-project\n    * @param {Object} options - the description of the project\n    * @param {Requestable.callback} cb - will receive the newly created project\n    * @return {Promise} - the promise for the http request\n    */\n   createProject(options, cb) {\n      options = options || {};\n      options.AcceptHeader = 'inertia-preview';\n      return this._request('POST', `/repos/${this.__fullname}/projects`, options, cb);\n   }\n\n}\n\nmodule.exports = Repository;\n"]},"metadata":{},"sourceType":"script"}