{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Requestable2 = require('./Requestable');\n\nvar _Requestable3 = _interopRequireDefault(_Requestable2);\n\nvar _debug = require('debug');\n\nvar _debug2 = _interopRequireDefault(_debug);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\n\nvar log = (0, _debug2.default)('github:user');\n/**\n * A User allows scoping of API requests to a particular Github user.\n */\n\nvar User = function (_Requestable) {\n  _inherits(User, _Requestable);\n  /**\n   * Create a User.\n   * @param {string} [username] - the user to use for user-scoped queries\n   * @param {Requestable.auth} [auth] - information required to authenticate to Github\n   * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n   */\n\n\n  function User(username, auth, apiBase) {\n    _classCallCheck(this, User);\n\n    var _this = _possibleConstructorReturn(this, (User.__proto__ || Object.getPrototypeOf(User)).call(this, auth, apiBase));\n\n    _this.__user = username;\n    return _this;\n  }\n  /**\n   * Get the url for the request. (dependent on if we're requesting for the authenticated user or not)\n   * @private\n   * @param {string} endpoint - the endpoint being requested\n   * @return {string} - the resolved endpoint\n   */\n\n\n  _createClass(User, [{\n    key: '__getScopedUrl',\n    value: function __getScopedUrl(endpoint) {\n      if (this.__user) {\n        return endpoint ? '/users/' + this.__user + '/' + endpoint : '/users/' + this.__user;\n      } else {\n        // eslint-disable-line\n        switch (endpoint) {\n          case '':\n            return '/user';\n\n          case 'notifications':\n          case 'gists':\n            return '/' + endpoint;\n\n          default:\n            return '/user/' + endpoint;\n        }\n      }\n    }\n    /**\n     * List the user's repositories\n     * @see https://developer.github.com/v3/repos/#list-user-repositories\n     * @param {Object} [options={}] - any options to refine the search\n     * @param {Requestable.callback} [cb] - will receive the list of repositories\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listRepos',\n    value: function listRepos(options, cb) {\n      if (typeof options === 'function') {\n        cb = options;\n        options = {};\n      }\n\n      options = this._getOptionsWithDefaults(options);\n      log('Fetching repositories with options: ' + JSON.stringify(options));\n      return this._requestAllPages(this.__getScopedUrl('repos'), options, cb);\n    }\n    /**\n     * List the orgs that the user belongs to\n     * @see https://developer.github.com/v3/orgs/#list-user-organizations\n     * @param {Requestable.callback} [cb] - will receive the list of organizations\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listOrgs',\n    value: function listOrgs(cb) {\n      return this._request('GET', this.__getScopedUrl('orgs'), null, cb);\n    }\n    /**\n     * List followers of a user\n     * @see https://developer.github.com/v3/users/followers/#list-followers-of-a-user\n     * @param {Requestable.callback} [cb] - will receive the list of followers\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listFollowers',\n    value: function listFollowers(cb) {\n      return this._request('GET', this.__getScopedUrl('followers'), null, cb);\n    }\n    /**\n     * List users followed by another user\n     * @see https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user\n     * @param {Requestable.callback} [cb] - will receive the list of who a user is following\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listFollowing',\n    value: function listFollowing(cb) {\n      return this._request('GET', this.__getScopedUrl('following'), null, cb);\n    }\n    /**\n     * List the user's gists\n     * @see https://developer.github.com/v3/gists/#list-a-users-gists\n     * @param {Requestable.callback} [cb] - will receive the list of gists\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listGists',\n    value: function listGists(cb) {\n      return this._request('GET', this.__getScopedUrl('gists'), null, cb);\n    }\n    /**\n     * List the user's notifications\n     * @see https://developer.github.com/v3/activity/notifications/#list-your-notifications\n     * @param {Object} [options={}] - any options to refine the search\n     * @param {Requestable.callback} [cb] - will receive the list of repositories\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listNotifications',\n    value: function listNotifications(options, cb) {\n      options = options || {};\n\n      if (typeof options === 'function') {\n        cb = options;\n        options = {};\n      }\n\n      options.since = this._dateToISO(options.since);\n      options.before = this._dateToISO(options.before);\n      return this._request('GET', this.__getScopedUrl('notifications'), options, cb);\n    }\n    /**\n     * Show the user's profile\n     * @see https://developer.github.com/v3/users/#get-a-single-user\n     * @param {Requestable.callback} [cb] - will receive the user's information\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getProfile',\n    value: function getProfile(cb) {\n      return this._request('GET', this.__getScopedUrl(''), null, cb);\n    }\n    /**\n     * Gets the list of starred repositories for the user\n     * @see https://developer.github.com/v3/activity/starring/#list-repositories-being-starred\n     * @param {Requestable.callback} [cb] - will receive the list of starred repositories\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listStarredRepos',\n    value: function listStarredRepos(cb) {\n      var requestOptions = this._getOptionsWithDefaults();\n\n      return this._requestAllPages(this.__getScopedUrl('starred'), requestOptions, cb);\n    }\n    /**\n     * Gets the list of starred gists for the user\n     * @see https://developer.github.com/v3/gists/#list-starred-gists\n     * @param {Object} [options={}] - any options to refine the search\n     * @param {Requestable.callback} [cb] - will receive the list of gists\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listStarredGists',\n    value: function listStarredGists(options, cb) {\n      options = options || {};\n\n      if (typeof options === 'function') {\n        cb = options;\n        options = {};\n      }\n\n      options.since = this._dateToISO(options.since);\n      return this._request('GET', '/gists/starred', options, cb);\n    }\n    /**\n     * List email addresses for a user\n     * @see https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user\n     * @param {Requestable.callback} [cb] - will receive the list of emails\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'getEmails',\n    value: function getEmails(cb) {\n      return this._request('GET', '/user/emails', null, cb);\n    }\n    /**\n     * Have the authenticated user follow this user\n     * @see https://developer.github.com/v3/users/followers/#follow-a-user\n     * @param {string} username - the user to follow\n     * @param {Requestable.callback} [cb] - will receive true if the request succeeds\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'follow',\n    value: function follow(username, cb) {\n      return this._request('PUT', '/user/following/' + username, null, cb);\n    }\n    /**\n     * Have the currently authenticated user unfollow this user\n     * @see https://developer.github.com/v3/users/followers/#follow-a-user\n     * @param {string} username - the user to unfollow\n     * @param {Requestable.callback} [cb] - receives true if the request succeeds\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'unfollow',\n    value: function unfollow(username, cb) {\n      return this._request('DELETE', '/user/following/' + username, null, cb);\n    }\n    /**\n     * Create a new repository for the currently authenticated user\n     * @see https://developer.github.com/v3/repos/#create\n     * @param {object} options - the repository definition\n     * @param {Requestable.callback} [cb] - will receive the API response\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'createRepo',\n    value: function createRepo(options, cb) {\n      return this._request('POST', '/user/repos', options, cb);\n    }\n  }]);\n\n  return User;\n}(_Requestable3.default);\n\nmodule.exports = User; //# sourceMappingURL=User.js.map","map":{"version":3,"sources":["User.js"],"names":["log","User","Requestable","endpoint","options","cb","JSON","requestOptions","username","module"],"mappings":"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","sourcesContent":["/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\nimport debug from 'debug';\nconst log = debug('github:user');\n\n/**\n * A User allows scoping of API requests to a particular Github user.\n */\nclass User extends Requestable {\n   /**\n    * Create a User.\n    * @param {string} [username] - the user to use for user-scoped queries\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(username, auth, apiBase) {\n      super(auth, apiBase);\n      this.__user = username;\n   }\n\n   /**\n    * Get the url for the request. (dependent on if we're requesting for the authenticated user or not)\n    * @private\n    * @param {string} endpoint - the endpoint being requested\n    * @return {string} - the resolved endpoint\n    */\n   __getScopedUrl(endpoint) {\n      if (this.__user) {\n         return endpoint ?\n            `/users/${this.__user}/${endpoint}` :\n            `/users/${this.__user}`\n            ;\n\n      } else { // eslint-disable-line\n         switch (endpoint) {\n            case '':\n               return '/user';\n\n            case 'notifications':\n            case 'gists':\n               return `/${endpoint}`;\n\n            default:\n               return `/user/${endpoint}`;\n         }\n      }\n   }\n\n   /**\n    * List the user's repositories\n    * @see https://developer.github.com/v3/repos/#list-user-repositories\n    * @param {Object} [options={}] - any options to refine the search\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   listRepos(options, cb) {\n      if (typeof options === 'function') {\n         cb = options;\n         options = {};\n      }\n\n      options = this._getOptionsWithDefaults(options);\n\n      log(`Fetching repositories with options: ${JSON.stringify(options)}`);\n      return this._requestAllPages(this.__getScopedUrl('repos'), options, cb);\n   }\n\n   /**\n    * List the orgs that the user belongs to\n    * @see https://developer.github.com/v3/orgs/#list-user-organizations\n    * @param {Requestable.callback} [cb] - will receive the list of organizations\n    * @return {Promise} - the promise for the http request\n    */\n   listOrgs(cb) {\n      return this._request('GET', this.__getScopedUrl('orgs'), null, cb);\n   }\n\n   /**\n    * List followers of a user\n    * @see https://developer.github.com/v3/users/followers/#list-followers-of-a-user\n    * @param {Requestable.callback} [cb] - will receive the list of followers\n    * @return {Promise} - the promise for the http request\n    */\n   listFollowers(cb) {\n      return this._request('GET', this.__getScopedUrl('followers'), null, cb);\n   }\n\n   /**\n    * List users followed by another user\n    * @see https://developer.github.com/v3/users/followers/#list-users-followed-by-another-user\n    * @param {Requestable.callback} [cb] - will receive the list of who a user is following\n    * @return {Promise} - the promise for the http request\n    */\n   listFollowing(cb) {\n      return this._request('GET', this.__getScopedUrl('following'), null, cb);\n   }\n\n   /**\n    * List the user's gists\n    * @see https://developer.github.com/v3/gists/#list-a-users-gists\n    * @param {Requestable.callback} [cb] - will receive the list of gists\n    * @return {Promise} - the promise for the http request\n    */\n   listGists(cb) {\n      return this._request('GET', this.__getScopedUrl('gists'), null, cb);\n   }\n\n   /**\n    * List the user's notifications\n    * @see https://developer.github.com/v3/activity/notifications/#list-your-notifications\n    * @param {Object} [options={}] - any options to refine the search\n    * @param {Requestable.callback} [cb] - will receive the list of repositories\n    * @return {Promise} - the promise for the http request\n    */\n   listNotifications(options, cb) {\n      options = options || {};\n      if (typeof options === 'function') {\n         cb = options;\n         options = {};\n      }\n\n      options.since = this._dateToISO(options.since);\n      options.before = this._dateToISO(options.before);\n\n      return this._request('GET', this.__getScopedUrl('notifications'), options, cb);\n   }\n\n   /**\n    * Show the user's profile\n    * @see https://developer.github.com/v3/users/#get-a-single-user\n    * @param {Requestable.callback} [cb] - will receive the user's information\n    * @return {Promise} - the promise for the http request\n    */\n   getProfile(cb) {\n      return this._request('GET', this.__getScopedUrl(''), null, cb);\n   }\n\n   /**\n    * Gets the list of starred repositories for the user\n    * @see https://developer.github.com/v3/activity/starring/#list-repositories-being-starred\n    * @param {Requestable.callback} [cb] - will receive the list of starred repositories\n    * @return {Promise} - the promise for the http request\n    */\n   listStarredRepos(cb) {\n      let requestOptions = this._getOptionsWithDefaults();\n      return this._requestAllPages(this.__getScopedUrl('starred'), requestOptions, cb);\n   }\n\n   /**\n    * Gets the list of starred gists for the user\n    * @see https://developer.github.com/v3/gists/#list-starred-gists\n    * @param {Object} [options={}] - any options to refine the search\n    * @param {Requestable.callback} [cb] - will receive the list of gists\n    * @return {Promise} - the promise for the http request\n    */\n   listStarredGists(options, cb) {\n      options = options || {};\n      if (typeof options === 'function') {\n         cb = options;\n         options = {};\n      }\n      options.since = this._dateToISO(options.since);\n      return this._request('GET', '/gists/starred', options, cb);\n   }\n\n   /**\n    * List email addresses for a user\n    * @see https://developer.github.com/v3/users/emails/#list-email-addresses-for-a-user\n    * @param {Requestable.callback} [cb] - will receive the list of emails\n    * @return {Promise} - the promise for the http request\n    */\n   getEmails(cb) {\n      return this._request('GET', '/user/emails', null, cb);\n   }\n\n   /**\n    * Have the authenticated user follow this user\n    * @see https://developer.github.com/v3/users/followers/#follow-a-user\n    * @param {string} username - the user to follow\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\n    * @return {Promise} - the promise for the http request\n    */\n   follow(username, cb) {\n      return this._request('PUT', `/user/following/${username}`, null, cb);\n   }\n\n   /**\n    * Have the currently authenticated user unfollow this user\n    * @see https://developer.github.com/v3/users/followers/#follow-a-user\n    * @param {string} username - the user to unfollow\n    * @param {Requestable.callback} [cb] - receives true if the request succeeds\n    * @return {Promise} - the promise for the http request\n    */\n   unfollow(username, cb) {\n      return this._request('DELETE', `/user/following/${username}`, null, cb);\n   }\n\n   /**\n    * Create a new repository for the currently authenticated user\n    * @see https://developer.github.com/v3/repos/#create\n    * @param {object} options - the repository definition\n    * @param {Requestable.callback} [cb] - will receive the API response\n    * @return {Promise} - the promise for the http request\n    */\n   createRepo(options, cb) {\n      return this._request('POST', '/user/repos', options, cb);\n   }\n}\n\nmodule.exports = User;\n"]},"metadata":{},"sourceType":"script"}