{"ast":null,"code":"'use strict';\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _Requestable2 = require('./Requestable');\n\nvar _Requestable3 = _interopRequireDefault(_Requestable2);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\n/**\n * A Gist can retrieve and modify gists.\n */\n\n\nvar Gist = function (_Requestable) {\n  _inherits(Gist, _Requestable);\n  /**\n   * Create a Gist.\n   * @param {string} id - the id of the gist (not required when creating a gist)\n   * @param {Requestable.auth} [auth] - information required to authenticate to Github\n   * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n   */\n\n\n  function Gist(id, auth, apiBase) {\n    _classCallCheck(this, Gist);\n\n    var _this = _possibleConstructorReturn(this, (Gist.__proto__ || Object.getPrototypeOf(Gist)).call(this, auth, apiBase));\n\n    _this.__id = id;\n    return _this;\n  }\n  /**\n   * Fetch a gist.\n   * @see https://developer.github.com/v3/gists/#get-a-single-gist\n   * @param {Requestable.callback} [cb] - will receive the gist\n   * @return {Promise} - the Promise for the http request\n   */\n\n\n  _createClass(Gist, [{\n    key: 'read',\n    value: function read(cb) {\n      return this._request('GET', '/gists/' + this.__id, null, cb);\n    }\n    /**\n     * Create a new gist.\n     * @see https://developer.github.com/v3/gists/#create-a-gist\n     * @param {Object} gist - the data for the new gist\n     * @param {Requestable.callback} [cb] - will receive the new gist upon creation\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'create',\n    value: function create(gist, cb) {\n      var _this2 = this;\n\n      return this._request('POST', '/gists', gist, cb).then(function (response) {\n        _this2.__id = response.data.id;\n        return response;\n      });\n    }\n    /**\n     * Delete a gist.\n     * @see https://developer.github.com/v3/gists/#delete-a-gist\n     * @param {Requestable.callback} [cb] - will receive true if the request succeeds\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'delete',\n    value: function _delete(cb) {\n      return this._request('DELETE', '/gists/' + this.__id, null, cb);\n    }\n    /**\n     * Fork a gist.\n     * @see https://developer.github.com/v3/gists/#fork-a-gist\n     * @param {Requestable.callback} [cb] - the function that will receive the gist\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'fork',\n    value: function fork(cb) {\n      return this._request('POST', '/gists/' + this.__id + '/forks', null, cb);\n    }\n    /**\n     * Update a gist.\n     * @see https://developer.github.com/v3/gists/#edit-a-gist\n     * @param {Object} gist - the new data for the gist\n     * @param {Requestable.callback} [cb] - the function that receives the API result\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'update',\n    value: function update(gist, cb) {\n      return this._request('PATCH', '/gists/' + this.__id, gist, cb);\n    }\n    /**\n     * Star a gist.\n     * @see https://developer.github.com/v3/gists/#star-a-gist\n     * @param {Requestable.callback} [cb] - will receive true if the request is successful\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'star',\n    value: function star(cb) {\n      return this._request('PUT', '/gists/' + this.__id + '/star', null, cb);\n    }\n    /**\n     * Unstar a gist.\n     * @see https://developer.github.com/v3/gists/#unstar-a-gist\n     * @param {Requestable.callback} [cb] - will receive true if the request is successful\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'unstar',\n    value: function unstar(cb) {\n      return this._request('DELETE', '/gists/' + this.__id + '/star', null, cb);\n    }\n    /**\n     * Check if a gist is starred by the user.\n     * @see https://developer.github.com/v3/gists/#check-if-a-gist-is-starred\n     * @param {Requestable.callback} [cb] - will receive true if the gist is starred and false if the gist is not starred\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'isStarred',\n    value: function isStarred(cb) {\n      return this._request204or404('/gists/' + this.__id + '/star', null, cb);\n    }\n    /**\n     * List the gist's commits\n     * @see https://developer.github.com/v3/gists/#list-gist-commits\n     * @param {Requestable.callback} [cb] - will receive the array of commits\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'listCommits',\n    value: function listCommits(cb) {\n      return this._requestAllPages('/gists/' + this.__id + '/commits', null, cb);\n    }\n    /**\n     * Fetch one of the gist's revision.\n     * @see https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist\n     * @param {string} revision - the id of the revision\n     * @param {Requestable.callback} [cb] - will receive the revision\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'getRevision',\n    value: function getRevision(revision, cb) {\n      return this._request('GET', '/gists/' + this.__id + '/' + revision, null, cb);\n    }\n    /**\n     * List the gist's comments\n     * @see https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist\n     * @param {Requestable.callback} [cb] - will receive the array of comments\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'listComments',\n    value: function listComments(cb) {\n      return this._requestAllPages('/gists/' + this.__id + '/comments', null, cb);\n    }\n    /**\n     * Fetch one of the gist's comments\n     * @see https://developer.github.com/v3/gists/comments/#get-a-single-comment\n     * @param {number} comment - the id of the comment\n     * @param {Requestable.callback} [cb] - will receive the comment\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'getComment',\n    value: function getComment(comment, cb) {\n      return this._request('GET', '/gists/' + this.__id + '/comments/' + comment, null, cb);\n    }\n    /**\n     * Comment on a gist\n     * @see https://developer.github.com/v3/gists/comments/#create-a-comment\n     * @param {string} comment - the comment to add\n     * @param {Requestable.callback} [cb] - the function that receives the API result\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'createComment',\n    value: function createComment(comment, cb) {\n      return this._request('POST', '/gists/' + this.__id + '/comments', {\n        body: comment\n      }, cb);\n    }\n    /**\n     * Edit a comment on the gist\n     * @see https://developer.github.com/v3/gists/comments/#edit-a-comment\n     * @param {number} comment - the id of the comment\n     * @param {string} body - the new comment\n     * @param {Requestable.callback} [cb] - will receive the modified comment\n     * @return {Promise} - the promise for the http request\n     */\n\n  }, {\n    key: 'editComment',\n    value: function editComment(comment, body, cb) {\n      return this._request('PATCH', '/gists/' + this.__id + '/comments/' + comment, {\n        body: body\n      }, cb);\n    }\n    /**\n     * Delete a comment on the gist.\n     * @see https://developer.github.com/v3/gists/comments/#delete-a-comment\n     * @param {number} comment - the id of the comment\n     * @param {Requestable.callback} [cb] - will receive true if the request succeeds\n     * @return {Promise} - the Promise for the http request\n     */\n\n  }, {\n    key: 'deleteComment',\n    value: function deleteComment(comment, cb) {\n      return this._request('DELETE', '/gists/' + this.__id + '/comments/' + comment, null, cb);\n    }\n  }]);\n\n  return Gist;\n}(_Requestable3.default);\n\nmodule.exports = Gist; //# sourceMappingURL=Gist.js.map","map":{"version":3,"sources":["Gist.js"],"names":["Gist","Requestable","cb","gist","response","revision","comment","body","module"],"mappings":"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","sourcesContent":["/**\n * @file\n * @copyright  2013 Michael Aufreiter (Development Seed) and 2016 Yahoo Inc.\n * @license    Licensed under {@link https://spdx.org/licenses/BSD-3-Clause-Clear.html BSD-3-Clause-Clear}.\n *             Github.js is freely distributable.\n */\n\nimport Requestable from './Requestable';\n\n/**\n * A Gist can retrieve and modify gists.\n */\nclass Gist extends Requestable {\n   /**\n    * Create a Gist.\n    * @param {string} id - the id of the gist (not required when creating a gist)\n    * @param {Requestable.auth} [auth] - information required to authenticate to Github\n    * @param {string} [apiBase=https://api.github.com] - the base Github API URL\n    */\n   constructor(id, auth, apiBase) {\n      super(auth, apiBase);\n      this.__id = id;\n   }\n\n   /**\n    * Fetch a gist.\n    * @see https://developer.github.com/v3/gists/#get-a-single-gist\n    * @param {Requestable.callback} [cb] - will receive the gist\n    * @return {Promise} - the Promise for the http request\n    */\n   read(cb) {\n      return this._request('GET', `/gists/${this.__id}`, null, cb);\n   }\n\n   /**\n    * Create a new gist.\n    * @see https://developer.github.com/v3/gists/#create-a-gist\n    * @param {Object} gist - the data for the new gist\n    * @param {Requestable.callback} [cb] - will receive the new gist upon creation\n    * @return {Promise} - the Promise for the http request\n    */\n   create(gist, cb) {\n      return this._request('POST', '/gists', gist, cb)\n         .then((response) => {\n            this.__id = response.data.id;\n            return response;\n         });\n   }\n\n   /**\n    * Delete a gist.\n    * @see https://developer.github.com/v3/gists/#delete-a-gist\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\n    * @return {Promise} - the Promise for the http request\n    */\n   delete(cb) {\n      return this._request('DELETE', `/gists/${this.__id}`, null, cb);\n   }\n\n   /**\n    * Fork a gist.\n    * @see https://developer.github.com/v3/gists/#fork-a-gist\n    * @param {Requestable.callback} [cb] - the function that will receive the gist\n    * @return {Promise} - the Promise for the http request\n    */\n   fork(cb) {\n      return this._request('POST', `/gists/${this.__id}/forks`, null, cb);\n   }\n\n   /**\n    * Update a gist.\n    * @see https://developer.github.com/v3/gists/#edit-a-gist\n    * @param {Object} gist - the new data for the gist\n    * @param {Requestable.callback} [cb] - the function that receives the API result\n    * @return {Promise} - the Promise for the http request\n    */\n   update(gist, cb) {\n      return this._request('PATCH', `/gists/${this.__id}`, gist, cb);\n   }\n\n   /**\n    * Star a gist.\n    * @see https://developer.github.com/v3/gists/#star-a-gist\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\n    * @return {Promise} - the Promise for the http request\n    */\n   star(cb) {\n      return this._request('PUT', `/gists/${this.__id}/star`, null, cb);\n   }\n\n   /**\n    * Unstar a gist.\n    * @see https://developer.github.com/v3/gists/#unstar-a-gist\n    * @param {Requestable.callback} [cb] - will receive true if the request is successful\n    * @return {Promise} - the Promise for the http request\n    */\n   unstar(cb) {\n      return this._request('DELETE', `/gists/${this.__id}/star`, null, cb);\n   }\n\n   /**\n    * Check if a gist is starred by the user.\n    * @see https://developer.github.com/v3/gists/#check-if-a-gist-is-starred\n    * @param {Requestable.callback} [cb] - will receive true if the gist is starred and false if the gist is not starred\n    * @return {Promise} - the Promise for the http request\n    */\n   isStarred(cb) {\n      return this._request204or404(`/gists/${this.__id}/star`, null, cb);\n   }\n\n   /**\n    * List the gist's commits\n    * @see https://developer.github.com/v3/gists/#list-gist-commits\n    * @param {Requestable.callback} [cb] - will receive the array of commits\n    * @return {Promise} - the Promise for the http request\n    */\n   listCommits(cb) {\n      return this._requestAllPages(`/gists/${this.__id}/commits`, null, cb);\n   }\n\n   /**\n    * Fetch one of the gist's revision.\n    * @see https://developer.github.com/v3/gists/#get-a-specific-revision-of-a-gist\n    * @param {string} revision - the id of the revision\n    * @param {Requestable.callback} [cb] - will receive the revision\n    * @return {Promise} - the Promise for the http request\n    */\n   getRevision(revision, cb) {\n      return this._request('GET', `/gists/${this.__id}/${revision}`, null, cb);\n   }\n\n   /**\n    * List the gist's comments\n    * @see https://developer.github.com/v3/gists/comments/#list-comments-on-a-gist\n    * @param {Requestable.callback} [cb] - will receive the array of comments\n    * @return {Promise} - the promise for the http request\n    */\n   listComments(cb) {\n      return this._requestAllPages(`/gists/${this.__id}/comments`, null, cb);\n   }\n\n   /**\n    * Fetch one of the gist's comments\n    * @see https://developer.github.com/v3/gists/comments/#get-a-single-comment\n    * @param {number} comment - the id of the comment\n    * @param {Requestable.callback} [cb] - will receive the comment\n    * @return {Promise} - the Promise for the http request\n    */\n   getComment(comment, cb) {\n      return this._request('GET', `/gists/${this.__id}/comments/${comment}`, null, cb);\n   }\n\n   /**\n    * Comment on a gist\n    * @see https://developer.github.com/v3/gists/comments/#create-a-comment\n    * @param {string} comment - the comment to add\n    * @param {Requestable.callback} [cb] - the function that receives the API result\n    * @return {Promise} - the Promise for the http request\n    */\n   createComment(comment, cb) {\n      return this._request('POST', `/gists/${this.__id}/comments`, {body: comment}, cb);\n   }\n\n   /**\n    * Edit a comment on the gist\n    * @see https://developer.github.com/v3/gists/comments/#edit-a-comment\n    * @param {number} comment - the id of the comment\n    * @param {string} body - the new comment\n    * @param {Requestable.callback} [cb] - will receive the modified comment\n    * @return {Promise} - the promise for the http request\n    */\n   editComment(comment, body, cb) {\n      return this._request('PATCH', `/gists/${this.__id}/comments/${comment}`, {body: body}, cb);\n   }\n\n   /**\n    * Delete a comment on the gist.\n    * @see https://developer.github.com/v3/gists/comments/#delete-a-comment\n    * @param {number} comment - the id of the comment\n    * @param {Requestable.callback} [cb] - will receive true if the request succeeds\n    * @return {Promise} - the Promise for the http request\n    */\n   deleteComment(comment, cb) {\n      return this._request('DELETE', `/gists/${this.__id}/comments/${comment}`, null, cb);\n   }\n}\n\nmodule.exports = Gist;\n"]},"metadata":{},"sourceType":"script"}